autowatch = 1;
inlets = 1;











// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};

var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
};

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
};

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
};

var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);






var Max = new Object();

Max.inlets = {};
Max.messageNames = {msg_int: 1, msg_float: 1, list: 1};
Max.applyEntry = false;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
  inlets = arguments.length;
  for (var i = 0; i < arguments.length; ++i) {
    var entry = arguments[i];
    Max.inlets[i] = {name: entry[0], func: entry[1]};
    var help = entry[2] ? (entry[0] + ": " + entry[2]) : entry[0];
    setinletassist(i, help);
  }
};

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
  return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
  var entry = Max.inlets[inlet];
  if (entry && entry.func) {
    var args = arrayfromargs(arguments);
    if (!Max.messageNames[messagename])
      args = [messagename].concat(args);
    if (Max.applyEntry)
      entry.func.apply(this, args);
    else
      entry.func(args);
  } else {
    post("Didn't understand input for", Max.Inlet(), '\n');
  }
};










var Util = {};

Util.IsString = function(x) {
  return typeof(x) == 'string';
};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};

// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//

Max._outlets = {};

// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};

Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};

Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};

Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};

Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
    if (!Util.IsString(name)) {
      help = name[1] || name;
      name = name[0];
    }

    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        post('!', Print(a), '\n');
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;

    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};

//
// Implementation details below here!
//

// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};






var Midi = {};





// Convert a number to an integer, if it isn't already one.
Util.toInt = function(s) {
  return (typeof(s) == 'number') ? s : parseInt(s);
};





Util.trimFrontRE = /^\s+/;
Util.trimBackRE = /\s+$/;

Util.trim = function(s) {
  if (typeof(s) != 'string') {
    post('Error at', "js/swirly/util/trim.js", ':', 11, ':', 'Not a string', Print(s), '\n');
    return s;
  }
  return s.replace(Util.trimBackRE, '').replace(Util.trimFrontRE, '');
};






// Read characters or JSON data from files.
var FileReader = new Object();

FileReader.LINE_SPLIT = /\r?\n/;
FileReader.PATH = [];

FileReader.SetPath = function(path) {
  FileReader.PATH = path;
  post('Current path is now', path.join(':'), '\n');
};

FileReader.separator = '/';

FileReader.IsRelative = function(name) {
  return (name[0] != this.separator) && (name.indexOf(':' ) == -1);
};

FileReader.Open = function(name) {
  name = Util.trim(name);
  var path = [''];
  if (FileReader.IsRelative(name))
    path = FileReader.PATH;

  for (var i in path) {
    var p = path[i];
    var file = new File(p.length ? (p + this.separator + name) : name);
    if (file.isopen)
      return file;
  }

  post('Error at', "js/swirly/util/FileReader.js", ':', 37, ':', "Couldn't open file", Print(name), '\n');
  return null;
};

FileReader.Read = function(filename, length) {
  var file = FileReader.Open(filename);
  return file && file.readstring(length || 1000000);
};

FileReader.CleanJsonComments = function(data) {
  var lines = data.split(FileReader.LINE_SPLIT);
  for (var i in lines) {
    var line = lines[i];
    var wasBackslash = false;
    for (var j = 0, len = line.length; j < len; j++) {
      if (wasBackslash) {
        wasBackslash = false;
      } else {
        var ch = line[j];
        if (ch == '\\') {
          wasBackslash = true;
        } else if (ch == '#') {
          lines[i] = line.substr(0, j);
          break;
        }
      }
    }
  }
  return lines.join('\n');
};

FileReader.ParseJson = function(data, filename) {
  post('here!', '\n');
  filename = filename || '(none)';
  try {
    data = FileReader.CleanJsonComments(data)
    return (data == '') ? {} : JSON.parse(data);
  } catch (err) {
    post('JSON error in file ' + filename + ':' +
         err.lineNumber + ': ' + err.name + '\n');
    return null;
  }
};

FileReader.ReadJson = function(filename, length) {
  var data = FileReader.Read(filename, length);
  return data && FileReader.ParseJson(data);
};

Midi.TempoSetter = function(outs_) {
  var self = this;

  var table_ = {};
  var tableFilename_ = '';
  var tempo_ = 120.0;
  var DEFAULT_MAX = 40.0;
  var DEFAULT_MIN = 150.0;
  var SCALE = 100.0;

  function line(tempo, time) {
    tempo_ = tempo || tempo_;
    outs_.line(SCALE * tempo_, time || 0);
  };

  self.pc = function(pc) {
    var event = table_.pc[pc];
    outs_.error(!event);
    if (!event) {
      post('Error at', "js/swirly/midi/TempoSetter.js", ':', 28, ':', 'No event for', Print(pc), '\n');
      return;
    }
    line(tempo_ || event.tempo);
    line(event.tempo, event.time);
  };

  self.cc = function(cc) {
    cc = Util.toInt(cc);
    if (cc) {
      var min = table_.min || DEFAULT_MIN;
      var max = table_.max || DEFAULT_MAX;

      line(min + (max - min) * (cc / 127.0));
    }
  };

  // TODO: derive from JsonFileConfigurable.
  function setByFileName(name) {
    var nt = name && name.length && FileReader.ReadJson(name);
    if (!nt)
      Postln("Couldn't read", name);

    outs_.error(!!nt);
    return nt;
  };

  self.text = function(filename, reload) {
    var table = setByFileName(filename);
    if (table) {
      table_ = table;
      tableFilename_ = filename;
    }
    outs_.error(!table);
  };

  self.reload = function() {
    self.text(tableFilename_, true);
  };

  self.tempo = function(tempo) {
    tempo_ = tempo;
  };
};

Max.SetOutlets(['line', 'Arguments to a "line" connected to the tempo.'],
               ['error', 'Did we get an error?']);


var _setter = new Midi.TempoSetter(Max.Out);

FileReader.SetPath([
  '/Users/tom/Documents',
  '/Users/tom/Documents/Odd',
  '/Volumes/Media/Odd']);

Max.SetInlets(
  ['Control change', _setter.cc],
  ['Program change', _setter.pc],
  ['Tempo', _setter.tempo],
  ['Data file name', _setter.text],
  ['Reload', _setter.reload])


post('Original source:', "js/tempo-setter.js", ' Compile date:', 'Sun Oct  5 12:41:27 EDT 2014');
