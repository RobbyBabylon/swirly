autowatch = 1;






var MatrixState = {};

MatrixState.DISABLED = 0;
MatrixState.ENABLED = 1;
MatrixState.CLICKED_FOR_ENABLE = 2;
MatrixState.CLICKED_FOR_DISABLE = 3;
MatrixState.WILL_BE_DISABLED = 4;

MatrixState.CLICK_TRANSITION = [
    MatrixState.CLICKED_FOR_ENABLE,
    MatrixState.CLICKED_FOR_DISABLE,
    MatrixState.DISABLED,
    MatrixState.ENABLED,
    MatrixState.ENABLED,
];

MatrixState.CLEAR_TRANSITION = [
    MatrixState.DISABLED,
    MatrixState.ENABLED,
    MatrixState.DISABLED,
    MatrixState.ENABLED,
    MatrixState.ENABLED
];

MatrixState.RELEASE_TRANSITION = [
    MatrixState.DISABLED,
    MatrixState.ENABLED,
    MatrixState.ENABLED,
    MatrixState.DISABLED,
    MatrixState.DISABLED
];






var Max = new Object();
Max.patcher = this.patcher;

Max.foreach = function(f) {
    for (var i = Max.patcher.firstobject; i; i = i.nextobject)
        f(i);
};

Max.findObjects = function(name, value) {
    var result = [];
    Max.foreach(function(i) { if (i[name] == value) result.push(i); });
    return result;
};

Max.findName = function(name) {
  return Max.findObjects('varname', name);
};

Max.findSubpatcher = function(name) {
  return Max.findName(name, container)[0].subpatcher();
};

Max.findClass = function(name) {
    return Max.findObjects('maxclass', name);
};

Max.findAllObjects = function(name, unique) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '') {
            if (value in result) {
                var instances = result[value];
                if (unique) {
                    print('ERROR: duplicate value for :' +
                          name + ':' + value + ':');
                } else {
                    instances.push(max_object);
                }
            } else {
                result[value] = unique ? max_object : [max_object];
            }
        }
    });
    return result;
};

Max.findByName = function(name) {
    var result = {};
    name = name || 'varname';
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '')
            result[value] = max_object;
    });
    return result;
};

Max.setValues = function(obj, dict) {
    for (var name in dict) {
        var value = dict[name];
        try {
            obj[name](value);
        } catch (e) {
            obj[name] = value;
        }
    }
};

Max.findAll = function() {
    var byClass = Max.findByName('maxclass'),
        byName = Max.findByName();

    function create(type, name, args) {
        var obj = byName[name];
        if (!obj) {
            obj = Max.patcher.newdefault(0, 0, type);
            obj.varname = name;
            byName[name] = obj;
        }
        Max.setValues(obj, args);
        return obj;
    }

    function createall(count, type, name, args) {
        var results = [];
        for (var i = 0; i < count; ++i)
            results.push(create(type, name + i, args));
        return results;
    }

    return {byClass: byClass, byName: byName,
            create: create, createall: createall};
};










var Util = {};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};

Util.endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

Util.addSuffix = function(str, suffix) {
    return Util.endsWith(str, suffix) ? str : str + suffix;
};

function isString(s) {
    return (s.constructor === String);
}

// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//

Max._outlets = {};

// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};

Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};

Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};

Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};

Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
      if (!isString(name)) {
      help = name[1] || name;
      name = name[0];
    }

    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;

    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};

//
// Implementation details below here!
//

// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};




var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = item instanceof Array;
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
}

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
}

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
}

function print(_) {
    if (arguments.length) {
        for (var i = 0; i < arguments.length; ++i)
            post(arguments[i]);
    } else {
        post(' ');
    }
    post();
}

function printable(x) {
    if (x === null)
        return '<null>';

    if (x === undefined)
        return '<undefined>';

    if (typeof(x) == 'object')
        return JSON.stringify(x);

    return String(x);
}

function maxLog(_) {
    for (var i = 0; i < arguments.length; i++)
        post(printable(arguments[i]));
}




var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);

function Matrix(config) {
    this.setConfig(config || this.default_config);
}

Matrix.prototype.default_config = {
    columns: 41, // 9 * 2 buttons + 2 sliders + 4 LFOs + 1 level
    rows: 12,

    color: {
        background: [1.0, 1.0, 1.0, 0.5],
        disabled: [0.9, 0.9, 0.9, 0.75],
        enabled: [0.0, 0.0, 0.0, 1.0],
        clicked_for_enable: [1.0, 0.7, 0.7, 1.0],
        clicked_for_disable: [0.5, 0.5, 0.5, 1.0],
        will_be_disabled: [0.5, 0.5, 0.5],
        selection: [1.0, 0.0, 0.0, 1.0],
        line_color: [0.5, 0.5, 0.5, 1.0],
    },
    circle_radius: 0.85,
    defer: true,
    merge_rows: [],
    select_on_input: 2,

    column_lines: [0, 9, 18, 27, 36, 40],
    row_lines: [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44],

    lineRatio: 0.01,
    padding: 0.2,
};

if (jsarguments.length > 1) {
    var config = Matrix.prototype.default_config;
    config.rows = Number(jsarguments[1]);
    config.columns = Number(jsarguments[2] || 0) || config.rows;
}

Matrix.prototype.setConfig = function(config) {
    for (var name in config)
        this[name] = config[name];

    this.colors = [
        this.color.disabled,
        this.color.enabled,
        this.color.clicked_for_enable,
        this.color.clicked_for_disable,
        this.color.will_be_disabled];

    this.matrix = new Array(this.columns);
    this.selection = undefined;

    for (var c = 0; c < this.columns; ++c) {
        this.matrix[c] = new Array(this.rows);
        for (var r = 0; r < this.rows; ++r)
            this.matrix[c][r] = MatrixState.DISABLED;
    }

    this.resize();
    this.makeButtons();
    this.labels = {}; // ?
    this.max.byClass.midiin.message('nanoKONTROL SLIDER/KNOB');
    this.max.byClass.dmxusbpro.message('/dev/cu.usbserial-6AYL2V8Z');
};

function postAll(x) {
    for (var i in x)
        post(i, x[i], '\n');
}




Matrix.prototype.makeButtons = function() {
    this.max = Max.findAll();

    var jsui = this.max.byClass.jsui,
        rect = jsui.rect,
        x = rect[0],
        y = rect[1],
        width = rect[2] - x,
        height = rect[3] - y,
        cellSize = this.cellSize * height / 2;

    for (var i = 0; i < this.columns; ++i) {
        var offset = (this.aspect + this.column_offsets[i]) * height / 2,
            nx = x + offset + 1,
            ny = y - cellSize;
        this.max.create(
            'button', 'input-button-' + i,
            {outlinecolor: [0.0, 0.5, 0.0, 1.0],
             blinkcolor: [0.5, 1.0, 0.0, 1.0],
             ignoreclick: 1,
             rect: [nx, ny, nx + cellSize, ny + cellSize]});
    }

    for (var i = 0; i < this.rows; ++i) {
        var offset = (1.0 - this.row_offsets[i]) * height / 2,
            nx = rect[2] + 3,
            ny = y + offset,
            nx2 = nx + cellSize + 5,
            button = this.max.create(
                'button', 'output-button-' + i,
                {outlinecolor: [0.5, 0.0, 0.0, 1.0],
                 blinkcolor: [1.0, 0.5, 0.0, 1.0],
                 ignoreclick: 1}),
            label = this.max.create(
                'textedit', 'output-label-' + i,
                {border: 1,
                 fontsize: 9,
                 lines:1,
                 keymode: 1}),
            append = this.max.create(
                ['append', i], 'output-append-' + i,
                {hidden: 1, fontsize: 9});
        button.rect = [nx, ny, nx + cellSize, ny + cellSize];

        var labelsize = 100;
        label.rect = [nx2, ny, nx2 + labelsize, ny + cellSize];
        label.fontsize = 9;

        append.rect = [nx2 + labelsize + 5, ny,
                       nx2 + labelsize + 75, ny + cellSize];
        append.fontsize = 9;
        Max.patcher.hiddenconnect(label, 0, append, 0);
        Max.patcher.hiddenconnect(append, 0, jsui, 0);
    }
};

Matrix.prototype.removeButtons = function() {
    var matches = [];
    for (var name in this.max.byName) {
        if (!(name.indexOf('input-') && name.indexOf('output-')))
            Max.patcher.remove(this.max.byName[name]);
    }
};

Matrix.prototype.resize = function() {
    /** Reminder: width is measured in columns, height in rows.

        In the jsui world, all canvases are normalized as follows:
        aspect = width / height

        and laid out like this:

          top left hand corner:     [-aspect,  1]
          top right hand corner:    [ aspect,  1]
          bottom left hand corner:  [-aspect, -1]
          bottom right hand corner: [ aspect, -1]

        so coordinates increase from left to right, and from bottom to top.

        Concrete example: a 5x4 matrix.  Natural aspect ratio is 1.25.  If the
        actual aspect ratio is less than 1.25, then we fill the columns and have
        space below the rows.  If it's greater than 1.25, we fill the rows and
        have space to the right of the columns.
    */
 var width = (box.rect[2] - box.rect[0]),
        height = (box.rect[3] - box.rect[1]);
    this.aspect = width / height;

    var columnLinesWidth = this.column_lines.length * this.lineRatio,
        rowLinesHeight = this.row_lines.length * this.lineRatio,
        columnCount = this.columns + columnLinesWidth + this.padding,
        rowCount = this.rows + rowLinesHeight + this.padding;
    this.columnSize = 2 * this.aspect / columnCount;
    this.rowSize = 2 / rowCount;
    this.cellSize = Math.min(this.columnSize, this.rowSize);

    this.lineWidth = this.cellSize * this.lineRatio;
    this.padWidth = this.cellSize * this.padding;
    var self = this;

    function offset(count, lines, off) {
        var result = [],
            frontIndex = 0;
        off += self.lineWidth + self.padWidth;

        for (var i = 0; i <= count; ++i) {
            result.push(off);
            var front = lines && lines[frontIndex];
            if (front !== undefined && front <= count) {
                off += self.lineWidth;
                ++frontIndex;
            }
            off += self.cellSize;
        }
        result[count] += self.padWidth;
        return result;
    };

    this.column_offsets = offset(this.columns, this.column_lines, -this.aspect);
    this.row_offsets = offset(this.rows, this.row_lines, -1.0);
    for (var row = 0; row <= this.rows; ++row)
        this.row_offsets[row] = -this.row_offsets[row];
};

Matrix.prototype.presetChanged = function() {
    for (var i = 0; i < this.rows; ++i) {
        this.max.byName['output-label-' + i].message('bang');
    }
};

Matrix.prototype.reset = function() {
 for (var c = 0; c < this.columns; c++)
  for (var r = 0; r < this.rows; r++)
            this.setState(c, r, MatrixState.DISABLED);
};

Matrix.prototype.clear = function() {
    this.forEach(MatrixState.CLEAR_TRANSITION);
};

Matrix.prototype.setColor = function(color) {
    sketch.glcolor(color[0], color[1], color[2], color[3]);
};

Matrix.prototype.setState = function(column, row, state) {
    var previousState = this.matrix[column][row]
    if (state !== undefined && previousState !== state) {
        this.matrix[column][row] = state;
        Max.Out.router(column, row, state);
    }
};

Matrix.prototype.forEach = function(func, dontDraw) {
 for (var c = 0; c < this.columns; c++)
  for (var r = 0; r < this.rows; r++)
            this.setState(c, r, func[this.matrix[c][r]]);
    this.draw();
};

Matrix.prototype.clearScreen = function() {
    var back = this.color.background;
 sketch.glclearcolor(back[0], back[1], back[2], back[3]);
 sketch.glclear();
};

Matrix.prototype.draw = function() {
    this.clearScreen();
    // Draw the guidelines.
    this.setColor(this.color.line_color);

    if (this.column_lines.length) {
        var begin = this.row_offsets[0],
            end = this.row_offsets[this.row_offsets.length - 1];
        for (var i = 0; i < this.column_lines.length; ++i) {
            sketch.moveto(this.column_offsets[this.column_lines[i]], end, 0);
            sketch.line(0, begin - end, 0);
        }
    }

    if (this.row_lines.length) {
        var begin = this.column_offsets[0],
            end = this.column_offsets[this.column_offsets.length - 1];
        for (var i = 0; i < this.row_lines.length; ++i) {
            sketch.moveto(begin, this.row_offsets[this.row_lines[i]], 0);
            sketch.line(end - begin, 0, 0);
        }
    }

    var self = this,
        halfCell = this.cellSize / 2;

    for (var c = 0; c < this.columns; c++) {
  for (var r = 0; r < this.rows; r++) {
            var state = this.matrix[c][r];
         sketch.moveto(self.column_offsets[c] + halfCell,
                          self.row_offsets[r] - halfCell, 0);
            self.setColor(self.colors[state]);
      sketch.circle(self.circle_radius * halfCell);
        }
    }

    // Draw the selection.
    if (this.selection) {
     sketch.moveto(this.column_offsets[this.selection[0]],
                      this.row_offsets[this.selection[1]], 0);
        this.setColor(this.color.selection);
        sketch.line(this.cellSize, 0, 0.0);
        sketch.line(0, -this.cellSize, 0.0);
        sketch.line(-this.cellSize, 0, 0.0);
        sketch.line(0, this.cellSize, 0.0);
    }
    refresh();
};

Matrix.prototype.outputSelection = function() {
    var selection = ['', ''];
    var sel = this.selection;
    if (sel)
        Max.Out.selection(sel[0].toString(), sel[1].toString());
    else
        Max.Out.selection('', '');
};

Matrix.prototype.onclick = function(x, y) {
 var world = sketch.screentoworld(x, y);

    // TODO: needs to be fixed to take into account separator lines!
 var column = Math.floor((world[0] + this.aspect) / this.cellSize);
 var row = Math.floor((1.0 - world[1]) / this.cellSize);
    this.clickSquare(column, row);
};

Matrix.prototype.clickSquare = function(column, row) {
    var col = this.matrix[column],
        state = col && col[row],
        mustDisable = (this.merge_rows.indexOf(row) == -1),
        self = this;

    if (state === undefined)
        return;

    function change(before, after, output) {
        if (mustDisable)
            for (var c = 0; c < self.columns; ++c)
                if (c != column && self.matrix[c][row] == before)
                    self.setState(c, row, after);
    };

    this.selection = [column, row];
    this.outputSelection();

    if (this.defer) {
        if (state == MatrixState.DISABLED) {
            change(MatrixState.ENABLED, Matrix.WILL_BE_DISABLED);
            change(MatrixState.CLICKED_FOR_ENABLE, MatrixState.DISABLED);
        } else if (state == MatrixState.CLICKED_FOR_ENABLE) {
            change(Matrix.WILL_BE_DISABLED, MatrixState.ENABLED);
        } else if (state == Matrix.WILL_BE_DISABLED) {
            change(MatrixState.CLICKED_FOR_ENABLE, MatrixState.DISABLE);
        }
        this.setState(column, row, MatrixState.CLICK_TRANSITION[state]);
    } else {
        this.setState(column, row, 1 - state);
        if (state == MatrixState.DISABLED)
            change(MatrixState.ENABLED, MatrixState.DISABLED, true);
    }
 this.draw();
};

Matrix.prototype.setDefer = function(def) {
    if (this.defer && !def) {
        this.clear();
        this.draw();
    }
    this.defer = def;
};

Matrix.prototype.release = function() {
    if (!this.defer) {
        print(('Error at ' + "js/swirly/gui/matrix.js" + ':' + 294 + ':' + 'not in defer mode' + ' ' + Print(false)));
        return;
    }
    this.forEach(MatrixState.RELEASE_TRANSITION);
};

Matrix.prototype.move = function(dx, dy) {
    if (!this.selection) {
        if (dx > 0 || dy > 0)
            this.selection = [0, 0];
        else if (dx < 0)
            this.selection = [this.columns - 1, 0];
        else
            this.selection = [0, this.rows - 1];
    } else {
        this.selection[0] += dx;
        this.selection[1] += dy;
        if (this.selection[0] < 0)
            this.selection[0] += this.columns;
        if (this.selection[1] < 0)
            this.selection[1] += this.rows;

        if (this.selection[0] >= this.columns)
            this.selection[0] -= this.columns;
        if (this.selection[1] >= this.rows)
            this.selection[1] -= this.rows;
    }
    this.outputSelection();
    this.draw();
};

Matrix.prototype.toggle = function() {
    if (this.selection)
        this.clickSquare(this.selection[0], this.selection[1]);
};

Matrix.prototype.bangButton = function(io, index) {
    var button = this.max.byName[io + '-button-' + index];
    if (button)
        button.bang();
    else
        print(('Error at ' + "js/swirly/gui/matrix.js" + ':' + 335 + ':' + 'Don\'t understand ' + ' ' + Print(io + ' ' + index)));
};

Matrix.prototype.onInput = function(column) {
    this.bangButton('output', column);
    for (var row = 0; row < this.rows; ++row) {
        if (this.matrix[column][row] === MatrixState.ENABLED)
            this.bangButton('input', row);
    }
};

Matrix.prototype.selectNext = function(select) {
    this.selectNextMidi = select;
};

Matrix.prototype.midi = function(cc, value) {
    var value = this.midiMap && this.midiMap[cc];
    if (value === undefined)
        value = cc;
    if (this.selectNextMidi) {
        this.selectNextMidi = false;
    }
};

var LFO_OFFSET = 36;

Matrix.prototype.lfo = function(number, value) {
    // this.bangButton('input', number + LFO_OFFSET);
};

var matrix;

function init() {
    matrix = new Matrix();
    sketch.default2d();
    matrix.draw();
}

init();

function onresize(w, h)
{
 matrix.resize();
 matrix.draw();
}

function onclick(x, y)
{
    matrix.onclick(x, y);
}

function ondblclick(x, y)
{
 onclick(x, y);
}

function defer(def) {
    matrix.setDefer(!!def);
}

function release() {
    matrix.release();
}

function left() {
    matrix.move(-1, 0);
}

function right() {
    matrix.move(1, 0);
}

function up() {
    matrix.move(0, -1);
}

function down() {
    matrix.move(0, 1);
}

function toggle() {
    matrix.toggle();
}

function clear() {
    matrix.clear();
}

function reset() {
    matrix.reset();
    matrix.draw();
}

function clear_selection() {
    matrix.selection = undefined;
    matrix.outputSelection();
    matrix.draw();
}

function onresize() {
    matrix.resize();
    matrix.draw();
}

function preset() {
    matrix.presetChanged();
}

function text(_) {
    for (var i = 0; i < arguments.length; ++i)
        post(arguments[i]);
    post('\n');
}

function removeButtons() {
    matrix.removeButtons();
}

function midi(cc, value) {
    matrix.midi(cc, value);
}

function lfo(number, value) {
    matrix.lfo(number, value);
}

Max.SetOutlets(
    ['router', 'Commands to router object.'],
    ['selection', 'A two-element list with the in/out selection names.']
);

print('\nOriginal source:', "js/max/crossmatrix.js", ' Compile date:', 'Sun Aug 28 13:49:37 EDT 2016');
