inlets = 1;
autowatch = 1;








var Max = new Object();






var Util = {};

Util.IsString = function(x) {
  return typeof(x) == 'string';
};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};

// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//

Max._outlets = {};

// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};

Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};

Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};

Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};

Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
    if (!Util.IsString(name)) {
      help = name[1] || name;
      name = name[0];
    }

    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        post('!', Print(a), '\n');
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;

    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};

//
// Implementation details below here!
//

// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};



var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);

Max.SetOutlets(
    ['router', 'Commands to router object.'],
    ['selection', 'A two-element list with the in/out selection names.']
);

function Matrix(config) {
    config = config || this.default_config;

    for (var name in config)
        this[name] = config[name];

    this.columns = (this.column_names && this.column_names.length)
        || this.columns;
    this.rows = (this.row_names && this.row_names.length)
        || this.rows;
    this.colors = [
        this.color.disabled,
        this.color.enabled,
        this.color.clicked_for_enable,
        this.color.clicked_for_disable,
        this.color.will_be_disabled];

    this.matrix = new Array(this.columns);
    this.selection = undefined;

    for (var c = 0; c < this.columns; ++c)
        this.matrix[c] = new Array(this.rows);
 this.colstep = this.step_amount / this.columns;
 this.rowstep = this.step_amount / this.rows;
    this.reset();
};

Matrix.prototype.default_config = {
    rows: 80,
    columns: 80,
    color: {
        background: [1.0, 1.0, 1.0, 0.5],
        disabled: [0.9, 0.9, 0.9, 0.75],
        enabled: [0.0, 0.0, 0.0, 1.0],
        clicked_for_enable: [1.0, 0.7, 0.7, 1.0],
         clicked_for_disable: [0.5, 0.5, 0.5, 1.0],
        will_be_disabled: [0.5, 0.5, 0.5],
        selection: [1.0, 0.0, 0.0, 1.0],
    },
    step_amount: 2.0,
    circle_radius: 0.95,
    defer: true,
    merge_rows: [],

    column_names: ['a', 'b', 'c', 'd', 'e'],
    row_names: ['1', '2', '3', '4', '5'],

    column_lines: [],
    row_lines: [],
};

Matrix.DISABLED = 0;
Matrix.ENABLED = 1;
Matrix.CLICKED_FOR_ENABLE = 2;
Matrix.CLICKED_FOR_DISABLE = 3;
Matrix.WILL_BE_DISABLED = 4;

Matrix.CLICK_TRANSITION = [
    Matrix.CLICKED_FOR_ENABLE,
    Matrix.CLICKED_FOR_DISABLE,
    Matrix.DISABLED,
    Matrix.ENABLED,
    Matrix.ENABLED,
];

Matrix.CLEAR_TRANSITION = [
    Matrix.DISABLED,
    Matrix.ENABLED,
    Matrix.DISABLED,
    Matrix.ENABLED,
    Matrix.ENABLED
];

Matrix.RELEASE_TRANSITION = [
    Matrix.DISABLED,
    Matrix.ENABLED,
    Matrix.ENABLED,
    Matrix.DISABLED,
    Matrix.DISABLED
];

Matrix.prototype.reset = function() {
    this.forEach(Matrix.DISABLED);
};

Matrix.prototype.clear = function() {
    this.forEach(Matrix.CLEAR_TRANSITION);
};

Matrix.prototype.setColor = function(color) {
    sketch.glcolor(color[0], color[1], color[2], color[3]);
};

Matrix.prototype.setState = function(column, row, state) {
    var previousState = this.matrix[column][row]
    if (state !== undefined && previousState !== state) {
        this.matrix[column][row] = state;
        if (state + previousState === 1)
            Max.Out.router(column, row, state);
    }
};

Matrix.prototype.forEach = function(func, dontDraw) {
    if (func instanceof Function) {
     for (var c = 0; c < this.columns; c++)
      for (var r = 0; r < this.rows; r++)
                this.setState(c, r, func(c, r, this.matrix[c][r]));
    } else if (func instanceof Array || func instanceof Object) {
     for (var c = 0; c < this.columns; c++)
      for (var r = 0; r < this.rows; r++)
                this.setState(c, r, func[this.matrix[c][r]]);
    } else {
     for (var c = 0; c < this.columns; c++)
      for (var r = 0; r < this.rows; r++)
                this.setState(c, r, func);
    }

    if (!dontDraw)
        this.draw()
};

Matrix.prototype.draw = function() {
 with (sketch)
 {
        var back = this.color.background;
  glclearcolor(back[0], back[1], back[2], back[3]);

  glclear();
        var that = this;
        function drawCircle(c, r, state) {
         moveto((c * that.colstep + that.colstep / 2) - 1.0,
                   1.0 - (r * that.rowstep + that.rowstep / 2), 0.0);
            that.setColor(that.colors[state]);
   circle(that.circle_radius / Math.max(that.rows, that.columns));
  };
        this.forEach(drawCircle, true);
        if (this.selection) {
         moveto(this.selection[0] * this.colstep - 1.0,
                   1.0 - (this.selection[1] * this.rowstep), 0.0);
            this.setColor(this.color.selection);
            line(this.colstep, 0, 0);
            line(0, -this.rowstep, 0);
            line(-this.colstep, 0, 0);
            line(0, this.rowstep, 0);
        }
 }
    refresh();
};

Matrix.prototype.outputSelection = function() {
    var selection = ['', ''];
    if (this.selection) {
        var c = this.selection[0], r = this.selection[1];
        selection = [this.column_names[c] || c.toString(),
                     this.row_names[r] || r.toString()]
    }
    Max.Out.selection(selection[0], selection[1]);
};

Matrix.prototype.onclick = function(x, y) {
 var worldx = sketch.screentoworld(x, y)[0];
 var worldy = sketch.screentoworld(x, y)[1];

 var colwidth = 2.0 / this.columns;
 var rowheight = 2.0 / this.rows;

 var column = Math.floor((worldx + 1.0) / colwidth);
 var row = Math.floor((1.0 - worldy) / rowheight);
    this.clickSquare(column, row);
};

Matrix.prototype.clickSquare = function(column, row) {
    var state = this.matrix[column][row];
    var mustDisable = (this.merge_rows.indexOf(row) == -1);
    var that = this;

    function change(before, after, output) {
        if (mustDisable)
            for (var c = 0; c < that.columns; ++c)
                if (c != column && that.matrix[c][row] == before)
                    that.setState(c, row, after);
    };

    this.selection = [column, row];
    this.outputSelection();

    if (this.defer) {
        if (state == Matrix.DISABLED) {
            change(Matrix.ENABLED, Matrix.WILL_BE_DISABLED);
            change(Matrix.CLICKED_FOR_ENABLE, Matrix.DISABLED);
        } else if (state == Matrix.CLICKED_FOR_ENABLE) {
            change(Matrix.WILL_BE_DISABLED, Matrix.ENABLED);
        } else if (state == Matrix.WILL_BE_DISABLED) {
            change(Matrix.CLICKED_FOR_ENABLE, Matrix.DISABLE);
        }
        this.setState(column, row, Matrix.CLICK_TRANSITION[state]);
    } else {
        this.setState(column, row, 1 - state);
        if (state == Matrix.DISABLED)
            change(Matrix.ENABLED, Matrix.DISABLED, true);
    }
 this.draw();
};

Matrix.prototype.setDefer = function(def) {
    if (this.defer && !def) {
        this.clear();
        this.draw();
    }
    this.defer = def;
};

Matrix.prototype.release = function() {
    if (!this.defer) {
        post('ERROR: not in defer mode\n');
        return;
    }
    this.forEach(Matrix.RELEASE_TRANSITION);
};

Matrix.prototype.move = function(dx, dy) {
    if (!this.selection) {
        if (dx > 0 || dy > 0)
            this.selection = [0, 0];
        else if (dx < 0)
            this.selection = [this.columns - 1, 0];
        else
            this.selection = [0, this.rows - 1];
    } else {
        this.selection[0] += dx;
        this.selection[1] += dy;
        if (this.selection[0] < 0)
            this.selection[0] += this.columns;
        if (this.selection[1] < 0)
            this.selection[1] += this.rows;

        if (this.selection[0] >= this.columns)
            this.selection[0] -= this.columns;
        if (this.selection[1] >= this.rows)
            this.selection[1] -= this.rows;
    }
    this.outputSelection();
    this.draw();
};

Matrix.prototype.toggle = function() {
    if (this.selection)
        this.clickSquare(this.selection[0], this.selection[1]);
};

var matrix = new Matrix();

sketch.default2d();
matrix.draw();

function onresize(w, h)
{
 matrix.draw();
};

function onclick(x, y)
{
    matrix.onclick(x, y);
};

function ondblclick(x, y)
{
 onclick(x, y);
};

// Make functions private to prevent triggering from Max.
onclick.local = 1;
ondblclick.local = 1;
onresize.local = 1;

function defer(def) {
    matrix.setDefer(!!def);
};

function release() {
    matrix.release();
};

function left() {
    matrix.move(-1, 0);
};

function right() {
    matrix.move(1, 0);
};

function up() {
    matrix.move(0, -1);
};

function down() {
    matrix.move(0, 1);
};

function toggle() {
    matrix.toggle();
};

function clear() {
    matrix.clear();
};

function reset() {
    matrix.reset();
};

function clear_selection() {
    matrix.selection = undefined;
    matrix.outputSelection();
    matrix.draw();
};

post('Original source:', "js/max/crossmatrix.js", ' Compile date:', 'Tue Mar 17 18:50:09 EDT 2015');
