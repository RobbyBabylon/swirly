autowatch = 1;
outlets = 0;









// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};

var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
};

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
};

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
};

var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);

Logging.setLogging(!true);










var Laser = {
    channels: {
        mode: 0,
        pattern: 1,
        zoom: 2,
        xrot: 3,
        yrot: 4,
        zrot: 5,
        hpos: 6,
        vpos: 7,
        color: 8,
    }
};

Laser.Instrument = function(multislider, dmx, channelOffset) {
    var faders = new Array(9);

    function sendMultislider() {
        Logging.Log('multislider', faders);
        multislider.message(faders);
    };

    function setFader(fader, value) {
        faders[fader] = value;
        dmx.message(1 + channelOffset + fader, value);
        Logging.Log('dmx', channelOffset + fader, value, '\n');
    };

    function clear() {
        for (var i = 1; i < faders.length; ++i)
            setFader(i, 0);
        setFader(0, 0xFF);

        sendMultislider();
    };


    this.setFader = function(fader, value) {
        setFader(fader, value);
        sendMultislider();
    };

    clear();
    this.clear = clear;
    Logging.Log('multislider', channelOffset, faders, faders.length);
};

Laser.Bank = function(multisliders, dmx, baseChannel, bankSize) {
    baseChannel = baseChannel || 0;
    bankSize = bankSize || 16;
    var instruments = [];
    for (var i in multisliders) {
        var offset = baseChannel + i * bankSize;
        instruments.push(new Laser.Instrument(multisliders[i], dmx, offset));
    }

    this.setEnabled = function(index, enabled) {
        Logging.Log('setEnabled', index, enabled);
        instruments[index].enabled = enabled;
    };

    this.setBlackout = function(index, blackout) {
        Logging.Log('setBlackout', index, blackout);
        instruments[index].setFader(Laser.channels.mode, blackout ? 0 : 0xFF);
    };

    this.setFader = function(fader, value) {
        instruments.forEach(function(instrument) {
            if (instrument.enabled)
                instrument.setFader(fader, value);
        });
    };
};






var Max = new Object();
Max.patcher = this.patcher;

Max.foreach = function(f) {
    for (var i = Max.patcher.firstobject; i; i = i.nextobject)
        f(i);
};

Max.findObjects = function(name, value) {
    var result = [];
    Max.foreach(function(i) { if (i[name] == value) result.push(i); });
    return result;
};

Max.findName = function(name) {
  return Max.findObjects('varname', name);
};

Max.findSubpatcher = function(name) {
  return Max.findName(name, container)[0].subpatcher();
};

Max.findClass = function(name) {
    return Max.findObjects('maxclass', name);
};

Max.findAllObjects = function(name, unique) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '') {
            if (value in result) {
                var instances = result[value];
                if (unique) {
                    post('ERROR: duplicate value for :' + name + ':' + value + ':', '\n');
                    post('instances!!!  ', Print(instances, 3), '\n'); }
                else
                    instances.push(max_object);
            } else {
                result[value] = unique ? max_object : [max_object];
            }
        }
    });
    return result;
};

Max.findFirstObject = function(name) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '')
            result[value] = max_object;
    });
    return result;
};

Max.findAll = function() {
    return {
        'maxclass': Max.findFirstObject('maxclass'),
        'varname': Max.findFirstObject('varname'),
    };
};


Laser.Nano = function() {
    var BANK_SIZE = 8,
        COLOR_OFFSET = 62,
        PATTERN_OFFSET = 10, // conservative guess.
        dmx = Max.findClass('dmxusbpro')[0],
        midiin = Max.findClass('midiin')[0],
        playMode = false,
        flashMode = false;

    dmx.message('/dev/cu.usbserial-6AYL2V8Z');
    midiin.message('nanoKONTROL SLIDER/KNOB');

    var multisliders = [];
    for (var i = 0; i < BANK_SIZE; ++i)
        multisliders.push(Max.findName('multislider[' + (i + 1) + ']')[0]);
    var bank = new Laser.Bank(multisliders, dmx);

    function subrange(name, begin, end) {
        var fader = Laser.channels[name];
        if (fader === undefined) {
            post('ERROR: Didn\'t understand channel name', name, '\n');
            return
        }

        var rangeRatio = (end - begin + 1) / 128;
        return function(value) {
            var scaled = begin + Math.floor((1 + value) * rangeRatio) - 1;
            bank.setFader(fader, scaled);
        };
    };

    function enable(index) {
        return function(value) {
            bank.setEnabled(index, value != 0);
        };
    };

    function sendBlackouts() {
        for (var i = 0; i < BANK_SIZE; ++i)
            bank.setBlackout(i, playMode === flashMode);
    };

    function play(value) {
        playMode = (value != 0);
        sendBlackouts();
    };

    function flash(value) {
        flashMode = (value != 0);
        sendBlackouts();
    }

    var commands = {
         0: subrange('color', COLOR_OFFSET, 255 - COLOR_OFFSET),
         1: subrange('pattern', PATTERN_OFFSET, 255 - PATTERN_OFFSET),
         2: subrange('zoom', 0, 127),
         3: subrange('xrot', 0, 127),
         4: subrange('yrot', 0, 127),
         5: subrange('zrot', 0, 127),
         6: subrange('hpos', 0, 127),
         7: subrange('vpos', 0, 127),

        12: subrange('zoom', 128, 255),
        13: subrange('xrot', 128, 255),
        14: subrange('yrot', 128, 255),
        15: subrange('zrot', 128, 255),
        16: subrange('hpos', 128, 255),
        17: subrange('vpos', 128, 255),

        20: enable(0),
        21: enable(1),
        22: enable(2),
        23: enable(3),
        24: enable(4),
        25: enable(5),
        26: enable(6),
        27: enable(7),

        41: play,
        44: flash,
    };

    this.receiveController = function(c, v) {
        var command = commands[c];
        if (command)
            command(v);
        else
            post('ERROR: don\'t understand controller ' + c + '\n');
    };
};





Max.inlets = {};
Max.scalarMessages = {msg_int: 1, msg_float: 1};
Max.applyEntry = true;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
    inlets = arguments.length;
    for (var i = 0; i < arguments.length; ++i) {
        var entry = arguments[i];
        Max.inlets[i] = {name: entry[0], func: entry[1]};
        var help = entry[2] ? (entry[0] + ': ' + entry[2]) : entry[0];
        setinletassist(i, help);
    }
    Max.setterInlets = false;
};

Max.ObjectInlets = function(object, names) {
    var results = [];

    var methods = object._methods;
    if (methods) {
        for (var i in methods) {
            var method = methods[i],
                name = method[0],
                help = method[1] || name,
                func = method[2] || object[name];
            if (!func)
                post('ERROR! no function for', name, '\n');
            results.push([name, func, help]);
        }
    } else {
        names = names || object.names;
        for (var i = 0; i < names.length; ++i)
            results.push([names[i], object[names[i]], names[i]]);
    }
    Max.SetInlets.apply(this, results);
};

Max.SetterInlets = function(item) {
    Max.setterItem = item;
    var names = item.names;
    inlets = names.length;
    for (var i = 0; i < names.length; ++i)
        setinletassist(i, names[i]);
}

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
    return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
    var item = Max.setterItem;
    if (item) {
        var name = item.names[inlet];
        if (arguments.length == 0)
            item[name] = messagename;
        else if (arguments.length == 1 && Max.scalarMessages[messagename])
            item[name] = arguments[0];
        else
            item[name] = arrayfromargs(arguments);

        item.lastUpdated = name;
        item.update();
    } else {
        var entry = Max.inlets[inlet];
        if (entry && entry.func) {
            var args = arrayfromargs(arguments);
            if (!(messagename == 'list' || Max.scalarMessages[messagename]))
                args = [messagename].concat(args);
            if (Max.applyEntry)
                entry.func.apply(this, args);
            else
                entry.func(args);
        } else {
            if (entry)
                post('ENTRY! ');
            post('ERROR: anything didn\'t understand input for', inlet,
                 Max.Inlet(), '\n');
        }
    }
};

var NANO = new Laser.Nano();

Max.SetInlets(['cc', NANO.receiveController, 'Continuous controller']);

post('Original source:', "js/max/nanolaser.js", ' Compile date:', 'Thu May 21 21:28:42 EDT 2015', '\n');
