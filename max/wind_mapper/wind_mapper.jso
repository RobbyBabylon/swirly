autowatch = 1;








var Max = new Object();

Max.inlets = {};
Max.messageNames = {msg_int: 1, msg_float: 1, list: 1};
Max.applyEntry = false;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
  inlets = arguments.length;
  for (var i = 0; i < arguments.length; ++i) {
    var entry = arguments[i];
    Max.inlets[i] = {name: entry[0], func: entry[1]};
    var help = entry[2] ? (entry[0] + ": " + entry[2]) : entry[0];
    setinletassist(i, help);
  }
};

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
  return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
  var entry = Max.inlets[inlet];
  if (entry && entry.func) {
    var args = arrayfromargs(arguments);
    if (!Max.messageNames[messagename])
      args = [messagename].concat(args);
    if (Max.applyEntry)
      entry.func.apply(this, args);
    else
      entry.func(args);
  } else {
    post("Didn't understand input for", Max.Inlet(), '\n');
  }
};










var Util = {};

Util.IsString = function(x) {
  return typeof(x) == 'string';
};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};

// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//

Max._outlets = {};

// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};

Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};

Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};

Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};

Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
    if (!Util.IsString(name)) {
      help = name[1] || name;
      name = name[0];
    }

    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        post('!', Print(a), '\n');
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;

    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};

//
// Implementation details below here!
//

// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};



var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);

Max.SetOutlets(['lights', 'To lighting MIDI CC.'],
               ['level', 'Accumulated input level from 0 to 1.'])

function Range(begin, end) {
    this.begin = (begin === undefined) ? 0 : begin;
    this.end = (end === undefined) ? 127 : end;
};

Range.prototype.limit = function(x) {
    return Math.floor(Math.min(this.end, Math.max(this.begin, x)));
}

Range.prototype.select = function(ratio) {
    var range = this.end - this.begin + 1;
    var w = range * ratio;
    var x = this.begin + w;
    return this.limit(x);
}

Range.prototype.ratio = function(entry) {
    entry = this.limit(entry);
    return (entry - this.begin) / (this.end - this.begin);
};

// From http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c

/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb(h, s, v) {
    var r, g, b;

    var i = Math.floor(h * 6);
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);

    switch (i % 6) {
        case 0: r = v, g = t, b = p; break;
        case 1: r = q, g = v, b = p; break;
        case 2: r = p, g = v, b = t; break;
        case 3: r = p, g = q, b = v; break;
        case 4: r = t, g = p, b = v; break;
        case 5: r = v, g = p, b = q; break;
        default: post("Error ", h, ":", i, "\n");
    }

    return [range.midi.select(r),
            range.midi.select(g),
            range.midi.select(b)];
}

function Mapper(channel, range) {
    this.channel = channel;
    this.range = range;
};

Mapper.prototype.select = function(level) {
    outlet(0, this.channel, this.range.select(level));
};

var breath = 0;

var range = {};

range.midi = new Range();
range.note = new Range(33, 103);
// range.note = new Range(23, 105);
range.pan = new Range();
range.tilt = new Range();
range.dimmer = new Range(4, 67);

var channel = {};

channel.pan = 0;
channel.tilt = channel.pan + 1;
channel.dimmer = channel.tilt + 2;
channel.r = channel.dimmer + 1;
channel.g = channel.r + 1;
channel.b = channel.g + 1;

var dimmer = new Mapper(channel.dimmer, range.dimmer),
    pan = new Mapper(channel.pan, range.pan),
    tilt = new Mapper(channel.tilt, range.tilt);

function levelOut() {
    var level = range.midi.ratio(breath);
    outlet(1, level);
    dimmer.select(level);
    tilt.select(level);
    pan.select(level);
};

Max.SetInlets(
    ['note',
     function(note) {
         var hue = range.note.ratio(note);
         var rgb = hsvToRgb(hue, 1.0, 1.0);
         outlet(0, channel.r, rgb[0]);
         outlet(0, channel.g, rgb[1]);
         outlet(0, channel.b, rgb[2]);
     },
     'Note number.'],

    ['breath',
     function(x) {
         breath = x;
         levelOut();
     },
     'Breath control.'],

    ['pan_min',
     function(x) {
         pan.range.begin = Number(x);
         levelOut();
     },
     'Minimum pan.'],

    ['pan_max',
     function(x) {
         pan.range.end = Number(x);
         levelOut();
     },
     'Maximum pan.'],

    ['tilt_begin',
     function(x) {
         tilt.range.begin = Number(x);
         levelOut();
     },
     'Minimum tilt.'],

    ['tilt_max',
     function(x) {
         tilt.range.end = Number(x);
         levelOut();
     },
     'Maximum tilt.']
);

post('Original source:', "js/max/wind_mapper.js", ' Compile date:', 'Fri Feb 20 00:32:47 EST 2015');
