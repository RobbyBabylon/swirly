outlets = 0;
autowatch = 1;








var Max = new Object();
Max.patcher = this.patcher;

Max.inlets = {};
Max.scalarMessages = {msg_int: 1, msg_float: 1};
Max.applyEntry = true;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
    inlets = arguments.length;
    for (var i = 0; i < arguments.length; ++i) {
        var entry = arguments[i];
        Max.inlets[i] = {name: entry[0], func: entry[1]};
        var help = entry[2] ? (entry[0] + ": " + entry[2]) : entry[0];
        setinletassist(i, help);
    }
    Max.setterInlets = false;
};

Max.ObjectInlets = function(object, names) {
    var results = [];

    var methods = object._methods;
    if (methods) {
        for (var i in methods) {
            var method = methods[i],
                name = method[0],
                help = method[1] || name,
                func = method[2] || object[name];
            results.push([name, func, help]);
        }
    } else {
        names = names || object.names;
        for (var i = 0; i < names.length; ++i)
            results.push([names[i], object[names[i]], names[i]]);
    }
    Max.SetInlets.apply(this, results);
};

Max.SetterInlets = function(item) {
    Max.setterItem = item;
    var names = item.names;
    inlets = names.length;
    for (var i = 0; i < names.length; ++i)
        setinletassist(i, names[i]);
}

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
    return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
    var item = Max.setterItem;
    if (item) {
        var name = item.names[inlet];
        if (arguments.length == 0)
            item[name] = messagename;
        else if (arguments.length == 1 && Max.scalarMessages[messagename])
            item[name] = arguments[0];
        else
            item[name] = arrayfromargs(arguments);

        item.lastUpdated = name;
        item.update();
    } else {
        var entry = Max.inlets[inlet];
        if (entry && entry.func) {
            var args = arrayfromargs(arguments);
            if (!(messagename == 'list' || Max.scalarMessages[messagename]))
                args = [messagename].concat(args);
            if (Max.applyEntry)
                entry.func.apply(this, args);
            else
                entry.func(args);
        } else {
            post("ERROR: Anything didn't understand input for",
                 Max.Inlet(), '\n');
        }
    }
};







// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};

var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
};

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
};

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
};

var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);







Max.foreach = function(f) {
    for (var i = Max.patcher.firstobject; i; i = i.nextobject)
        f(i);
};

Max.findObjects = function(name, value) {
    var result = [];
    Max.foreach(function(i) { if (i[name] == value) result.push(i); });
    return result;
};

Max.findName = function(name) {
  return Max.findObjects('varname', name);
};

Max.findSubpatcher = function(name) {
  return Max.findName(name, container)[0].subpatcher();
};

Max.findClass = function(name) {
    return Max.findObjects('maxclass', name);
};

Max.findAllObjects = function(name, unique) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '') {
            if (value in result) {
                var instances = result[value];
                if (unique) {
                    post('ERROR: duplicate value for :' + name + ':' + value + ':', '\n');
                    post('instances!!!  ', Print(instances, 3), '\n'); }
                else
                    instances.push(max_object);
            } else {
                result[value] = unique ? max_object : [max_object];
            }
        }
    });
    return result;
};

Max.findFirstObject = function(name) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '')
            result[value] = max_object;
    });
    return result;
};

Max.findAll = function() {
    return {
        'maxclass': Max.findFirstObject('maxclass'),
        'varname': Max.findFirstObject('varname'),
    };
};










var Util = {};

Util.IsString = function(x) {
  return typeof(x) == 'string';
};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};






Util.trimFrontRE = /^\s+/;
Util.trimBackRE = /\s+$/;

Util.trim = function(s) {
  if (typeof(s) != 'string') {
    post('Error at', "js/swirly/util/trim.js", ':', 12, ':', 'Not a string', ' ', Print(s), '\n');
    return s;
  }
  return s.replace(Util.trimBackRE, '').replace(Util.trimFrontRE, '');
};

// Read characters or JSON data from files.
var FileReader = new Object();

FileReader.LINE_SPLIT = /\r?\n/;
FileReader.PATH = [];

FileReader.SetPath = function(path) {
    FileReader.PATH = path;
    post('Current path is now', path.join(':'), '\n');
};

FileReader.separator = '/';

FileReader.IsRelative = function(name) {
    return (name[0] != this.separator) && (name.indexOf(':' ) == -1);
};

FileReader.Open = function(name) {
    name = Util.trim(name);
    var path = [''];
    if (FileReader.IsRelative(name))
        path = FileReader.PATH;

    for (var i in path) {
        var p = path[i];
        var file = new File(p.length ? (p + this.separator + name) : name);
        if (file.isopen)
            return file;
    }

    post('Error at', "js/swirly/util/FileReader.js", ':', 38, ':', "Couldn't open file", ' ', Print(name), '\n');
    return null;
};

FileReader.Read = function(filename, length) {
    var file = FileReader.Open(filename);
    return file && file.readstring(length || 1000000);
};

FileReader.CleanJsonComments = function(data) {
    var lines = data.split(FileReader.LINE_SPLIT);
    for (var i in lines) {
        var line = lines[i];
        var wasBackslash = false;
        for (var j = 0, len = line.length; j < len; j++) {
            if (wasBackslash) {
                wasBackslash = false;
            } else {
                var ch = line[j];
                if (ch == '\\') {
                    wasBackslash = true;
                } else if (ch == '#') {
                    lines[i] = line.substr(0, j);
                    break;
                }
            }
        }
    }
    return lines.join('\n');
};

FileReader.ParseJson = function(data, filename) {
    filename = filename || '(none)';
    try {
        data = FileReader.CleanJsonComments(data)
        return (data == '') ? {} : JSON.parse(data);
    } catch (err) {
        post('JSON error in file ' + filename + ':' +
             err.lineNumber + ': ' + err.name + '\n');
        return null;
    }
};

FileReader.ReadJson = function(filename, length) {
    var data = FileReader.Read(filename, length);
    return data && FileReader.ParseJson(data, filename);
};

function DefaultScene() {
    this.note = function() {};
    this.breath = function() {};
    this.program = function() {};
    this.pitchbend = function() {};
    this.level = function() {};
    this.phasor = function() {};
    this.cue = function() {};
    this.transport = function() {};
    this.timer = function() {};
};

function ShowRunner() {
    this._methods = [
        // These methods need to be overridden.
        ['note', 'MIDI note on and off'],
        ['breath', 'breath control'],
        ['program', 'program change'],
        ['pitchbend', 'pitchbend'],
        ['level', 'audio level'],
        ['phasor', 'The phasor value between 0 and 1'],
        ['cue', 'Incoming cues from the sequencer.'],
        ['transport', 'A list representing the transport number.'],
        ['timer', 'Result of some incoming time'],

        // These ones are hard-coded.
        ['dmxusbpro', 'Menu output from the dmx USB pro'],
        ['load', 'Load a scene from a disk file.'],
    ];

    this._scene = new DefaultScene();
    this._objects = Max.findAll();
    this._dmxusbpro = this._objects.maxclass.dmxusbpro;
    this._timer = this._objects.maxclass.timer;

    var self = this;

    this.load = function(filename) {
        var data = FileReader.ReadJson(filename);
        if (!data)
            return post('Error at', "js/swirly/windmapper/ShowRunner.js", ':', 47, ':', 'No file', ' ', Print(filename), '\n');

        if (!data.type)
            return post('Error at', "js/swirly/windmapper/ShowRunner.js", ':', 50, ':', 'No type in', ' ', Print(filename), '\n');

        var scene = ShowRunner.SCENE_TYPES[data.type];
        if (!scene)
            return post('Error at', "js/swirly/windmapper/ShowRunner.js", ':', 54, ':', 'Unknown type', ' ', Print(data.type + ' in ' + filename), '\n');
        this._scene = scene.apply(self);
    };

    this.dmxusbpro = function(command, device) {
        if (command === 'append' && device != 'None')
            self._dmxusbpro.message(device);
    };

    function delegateToScene(name) {
        return function(_) {
            var method = self._scene[name];
            if (method)
                method.apply(self, arrayfromargs(arguments));
            else
                post('Error at', "js/swirly/windmapper/ShowRunner.js", ':', 69, ':', 'no proxy method for name ', ' ', Print(name), '\n');
        };
    };

    for (var name in this._help) {
        if (!(name in this))
            this[name] = delegateToScene(name);
    }
};

ShowRunner.SCENE_TYPES = {};

var _show_runner = new ShowRunner();

Max.ObjectInlets(_show_runner);

post('Original source:', "js/max/show_runner.js", ' Compile date:', 'Sat May 16 13:26:34 EDT 2015', '\n');
