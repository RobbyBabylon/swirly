autowatch = 1;
outlets = 0;








var Max = new Object();
Max.patcher = this.patcher;

Max.inlets = {};
Max.scalarMessages = {msg_int: 1, msg_float: 1};
Max.applyEntry = true;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
    inlets = arguments.length;
    for (var i = 0; i < arguments.length; ++i) {
        var entry = arguments[i];
        Max.inlets[i] = {name: entry[0], func: entry[1]};
        var help = entry[2] ? (entry[0] + ': ' + entry[2]) : entry[0];
        setinletassist(i, help);
    }
    Max.setterInlets = false;
};

Max.ObjectInlets = function(object, names) {
    var results = [];

    var methods = object._methods;
    if (methods) {
        for (var i in methods) {
            var method = methods[i],
                name = method[0],
                help = method[1] || name,
                func = method[2] || object[name];
            if (!func)
                post('ERROR! no function for', name, '\n');
            results.push([name, func, help]);
        }
    } else {
        names = names || object.names;
        for (var i = 0; i < names.length; ++i)
            results.push([names[i], object[names[i]], names[i]]);
    }
    Max.SetInlets.apply(this, results);
};

Max.SetterInlets = function(item) {
    Max.setterItem = item;
    var names = item.names;
    inlets = names.length;
    for (var i = 0; i < names.length; ++i)
        setinletassist(i, names[i]);
}

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
    return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
    var item = Max.setterItem;
    if (item) {
        var name = item.names[inlet];
        if (arguments.length == 0)
            item[name] = messagename;
        else if (arguments.length == 1 && Max.scalarMessages[messagename])
            item[name] = arguments[0];
        else
            item[name] = arrayfromargs(arguments);

        item.lastUpdated = name;
        item.update();
    } else {
        var entry = Max.inlets[inlet];
        if (entry && entry.func) {
            var args = arrayfromargs(arguments);
            if (!(messagename == 'list' || Max.scalarMessages[messagename]))
                args = [messagename].concat(args);
            if (Max.applyEntry)
                entry.func.apply(this, args);
            else
                entry.func(args);
        } else {
            if (entry)
                post('ENTRY! ');
            post('ERROR: anything didn\'t understand input for', inlet,
                 Max.Inlet(), '\n');
        }
    }
};







// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};

var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
};

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
};

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
};

var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);




var Laser = {
    channels: {
        mode: 0,
        pattern: 1,
        zoom: 2,
        xrot: 3,
        yrot: 4,
        zrot: 5,
        hpos: 6,
        vpos: 7,
        color: 8,
    },

    color: {
        all: 0,
        red: 64,
        green: 96,
        blue: 128,
        yellow: 160,
        pink: 192,
        cyan: 224
    },

    pattern: {
        circle: 0,
        spike_circle: 8,
        triangle: 16,
        square: 24,
        spike_square: 32,
        square_in_square: 40,
        maltese_cross: 48,
        star: 56,
        ell: 64,
        hourglass: 72,
        spiral: 80,
        cees: 88,
        logarithmic: 96,
        two_quarter_circle: 104,
        specs: 112,
        wave: 120,
        vee: 128,
        em: 136,
        saw: 144,
        line: 152,
        three_lines: 160,
        joined_line: 168,
        parallel_lines: 176,
        x: 184,
        skew: 192,
        four_lines: 200,
        two_squares: 208,
        four_squares: 216,
        one_intense_square: 224,
        dotted_line: 232,
        dotted_semicircle: 240,
        random_dots: 248
    }
};





var Util = {};

Dict = {};

Dict.Keys = function(d) {
  /** TODO: these's a better way.*/
  var r = [];
  for (var i in d)
    r.push(i);

  return r;
};

Dict.GetOrAddDefault = function(table, key, value) {
  if (key in table)
    value = table[key];
  else
    table[key] = value;

  return value;
};

Dict.Copy = function(dict) {
  return Dict.CopyTo(dict, {});
};

Dict.CopyTo = function(from, to) {
  for (var name in from)
    to[name] = from[name];
  return to;
};

Dict.GetKeys = function(dict) {
  var names = [];
  for (var name in dict)
    names.push(name);

  return names;
};

Dict.GetCommandFromMap = function(map, input) {
  if (!input || !input.length) {
    post("ERROR: Empty input", Print(input), '\n');
    return;
  }

  for (var i = 0; ; ++i) {
    if (!map) {
      post("ERROR: Didn't understand input", Print(input), '\n');
      return;
    }

    if (Util.IsString(map))
      return {command: map, data: input.slice(i + 1)};

    if (i >= input.length) {
      post("ERROR: Ran out during input", Print(input), '\n');
      return;
    }

    map = map[input[i]] || map['*'];
  }
};

Dict.remap = function(map, assignments) {
    var result = {};
    for (var a in assignments)
        result[map[a]] = assignments[a];
    return result;
};

Dict.update = function(to, from) {
    for (var i in from)
        to[i] = from[i];
};

Dict.offset = function(offset, dict) {
    var result = {};
    for (var i in dict)
        result[i] = dict[i] + offset;
    return result;
};

Dict.union = function(_) {
    var result = {};
    for (var i in arguments)
        update(result, arguments[i]);
    return result;
};

Dict.invert = function(dict) {
    var result = {};
    for (var d in dict) {
        var v = dict[d];
        if (v in result)
            throw 'Dict.invert: Duplicate value ' + v;
        result[v] = d;
    }
    return result;
};

Dict.oneach = function(dict, f) {
    for (var k in dict)
        dict[k] = f(dict[k], k);
};

/** We need this because invert always stringifies its keys... */
Dict.invertArray = function(array) {
    var result = {};
    for (var i = 0; i < array.length; ++i) {
        var v = array[i];
        if (v in result)
            throw 'Dict.invertArray: Duplicate value ' + v;
        result[v] = i;
    }
    return result;
};

Dict.forEach = function(dict, f) {
    for (var k in dict)
        f(k, dict[k]);
};









Range = function(begin, end) {
    this.begin = (begin === undefined) ? 0 : begin;
    this.end = (end === undefined) ? 127 : end;
};

Range.prototype.contains = function(entry) {
    return entry >= this.begin && entry <= this.end;
};

Range.prototype.limit = function(x) {
    return Math.floor(Math.min(this.end, Math.max(this.begin, x)));
}

Range.prototype.select = function(ratio) {
    var range = this.end - this.begin + 1;
    var w = range * ratio;
    var x = this.begin + w;
    return this.limit(x);
}

Range.prototype.ratio = function(entry) {
    entry = this.limit(entry);
    return (entry - this.begin) / (this.end - this.begin);
};


/**

A list of [time, controller dictionary].
Controller can be one number or it can be a list of numbers.

*/

function Loop(sequence, length, loops) {
    return function(show, time, context) {
        var loopCount = Math.floor(time / length);
        if (!loops || loopCount <= loops)
            sequence(show, time - loopCount * length, context);
    };
};







/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
Util.hsvToRgb = function(h, s, v) {
    var rgb = Util.hsvToRgbRaw(hsv);
    return [range.midi.select(rgb[0]),
            range.midi.select(rgb[1]),
            range.midi.select(rgb[2])];
};

Util.hsvToRgbRaw = function(h, s, v) {
    var r, g, b;

    var i = Math.floor(h * 6);
    var f = h * 6 - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);

    switch (i % 6) {
        case 0: r = v, g = t, b = p; break;
        case 1: r = q, g = v, b = p; break;
        case 2: r = p, g = v, b = t; break;
        case 3: r = p, g = q, b = v; break;
        case 4: r = t, g = p, b = v; break;
        case 5: r = v, g = p, b = q; break;
        default: post("Error ", h, ":", i, "\n");
    }

    return [r, g, b];
};



function makeRange(x) {
    return x && (
        typeof(x) == 'number' ? new Range(0, x) : new Range(x[0], x[1]));
};

function NoteAndBreathMapper(args) {
    args = args || {};
    var channels = Channel.moving,
        baseX = 90,
        baseY = 90;

    function Mapper(show) {
        show._dmxoutput(channels.x, baseX);
        show._dmxoutput(channels.y, baseY);
        this.note = function(note, velocity) {
            if (velocity) {
                var hue = Ranges.note.ratio(note);
                var rgb = Util.hsvToRgbRaw(hue, 1, 1);
                show._dmxratio(channels.red, rgb[0]);
                show._dmxratio(channels.green, rgb[1]);
                show._dmxratio(channels.blue, rgb[2]);
            }
        };

        this.breath = function(bc) {
            var ratio = Ranges.note.ratio(bc);
            show._dmxratio(channels.dimmer, ratio);
            if (args.white)
                show._dmxratio(channels.white, ratio * args.white);
            if (args.effect_pos)
                show._dmxratio(channels.effect, ratio * args.effect_pos / 2);
            if (args.effect)
                show._dmxratio(channels.effect, 0.5 + ratio * args.effect / 2);

            var r2 = -1 + 2 * ratio;
            if (args.x)
                show._dmxratio(channels.x, r2 * args.x + baseX / 255);
            if (args.y)
                show._dmxratio(channels.y, r2 * args.y + baseY / 255);

        };
    };

    return function(show) { return new Mapper(show); };
};


/**

A list of [time, command].

command can be:
  * 0, which means "clear all lights".
  * a dictionary of lighting values.
  * a runnable.

*/

function Sequence(_) {
    var sequence = arguments;
    return function(show, time, context) {
        context.index = context.index || 0;
        context.running = context.running || [];

        for (; context.index < sequence.length; ++context.index) {
            var s = sequence[context.index];
            if (s[0] > time)
                break;
            var command = s[1];
            if (command === 0) {
                show._clearDMX();
            } else if (typeof(command) === 'object') {
                // It's a dictionary of lighting values.
                for (var i in command)
                    show._dmxoutput(parseInt(i), command[i]);
            } else if (typeof(command) == 'function') {
                context.running.push([time, command, {}]);
            } else {
                post('ERROR: don\'t understand sequence ', context.index, '\n');
            }
        }

        for (var i in context.running) {
            var runner = context.running[i],
                offset = runner[0],
                run = runner[1],
                runnerContext = runner[2];
            run(show, time - offset, runnerContext);
        }
    };
};

var Channel = {
    laser: [
        Dict.offset(1, Laser.channels),
        Dict.offset(17, Laser.channels),
        Dict.offset(33, Laser.channels),
        Dict.offset(49, Laser.channels)
    ],

    moving: Dict.offset(64, {
        x: 1,
        y: 2,
        rotation: 3,
        red: 4,
        green: 5,
        blue: 6,
        white: 7,
        partition: 8,
        inside: 9,
        dimmer: 10,
        strobe: 11,
        effect: 12,
        blank: 13,
        auto: 14
    });

var Ranges = {
    note: new Range(33, 103),
    dmx: new Range(0, 255),
    midi: new Range(0, 127),
};


function DMXScene(_) {
    var args = arguments;
    return function(show) {
        for (var i in args) {
            var scene = args[i];
            for (var c in scene)
                show._dmxoutput(parseInt(c), scene[c]);
        }
    };
};


/**

A list of [controller, envelope].
Controller can be one number or it can be a list of numbers.

*/

function EnvelopeSequence(envelopes) {
    return function(show, time) {
        for (var i in envelopes) {
            var e = envelopes[i];
            var value = e[1].run(time);
            if (value !== undefined) {
                var controllers = e[0], type = typeof(controllers);
                if (type === 'string')
                    controllers = [parseInt(controllers)];
                else if (type === 'number')
                    controllers = [controllers];

                for (var c in controllers)
                    show._dmxoutput(controllers[c], value);
            }
        }
    };
};
/*
What does an envelope look like?  It takes an object:

data: [
  [time1, value],
  [time2, value, envelope, arguments],
]
length: time
loops: number
is_float: bool

times are strictly increasing!

*/

function Envelope(args) {
    var last = args.data.length - 1,
        length = args.length,
        loops = args.loops;

    if (length === undefined)
        length = args.data.length ? args.data[last][0] : 0;

    if (loops === undefined)
        loops = 1;

    var firstTime = args.data[0][0],
        lastTime = args.data[last][0],
        lastValue = args.data[last][1];

    this.run = function(time) {
        /** These is one more segment than there are times - because there is a
            segment before, a segment after, and then one between each time. */
        var loop_number = Math.floor(time / length);
        if (loops <= loop_number)
            return lastValue;
        time = time % length;

        if (time < firstTime)
            return undefined;
        if (time >= lastTime)
            return lastValue;

        for (var i = 1; i < last && time >= args.data[i][0]; ++i);

        var segBefore = args.data[i - 1],
            segAfter = args.data[i],
            segmentTime = segAfter[0] - segBefore[0],
            segmentHeight = segAfter[1] - segBefore[1],
            elapsedRatio = (time - segBefore[0]) / segmentTime,
            value = segBefore[1] + elapsedRatio * segmentHeight;
        return value;
    };
};


var VLPrograms = {
   'Trumpet': [0, 0],
   'Maynard': [0, 1],
   'Alpert': [0, 2],
   'Chet_Tpt': [0, 3],
   'Lead_Tpt': [0, 4],
   'ClassTpt': [0, 5],
   'StrMtTpt': [0, 6],
   'CupMtTpt': [0, 7],
   'WahMtTpt': [0, 8],
   'WaTptCC4': [0, 9],
   'HrmMtTpt': [0, 10],
   'Mute_Tpt': [0, 11],
   'Picc_Tpt': [0, 12],
   'Cornet': [0, 13],
   'Flugel': [0, 14],
   'Mangione': [0, 15],
   'Big_Bone': [0, 17],
   'BriteTbn': [0, 18],
   'ValveTbn': [0, 19],
   'Jam_Bone': [0, 20],
   'Bass_Tbn': [0, 21],
   'BcktMtTb': [0, 22],
   'WX_Horn': [0, 24],
   'BrassHrn': [0, 25],
   'BriteHrn': [0, 26],
   'ff_Horn': [0, 27],
   'OrchHorn': [0, 28],
   'New_Horn': [0, 29],
   'Euphnium': [0, 30],
   'Tuba': [0, 31],
   'SoprnoSx': [0, 32],
   'HeyKenG_': [0, 34],
   'Branford': [0, 35],
   'TraneSop': [0, 36],
   'BrtSopSx': [0, 37],
   'Alto_Sax': [0, 38],
   'Sanborn': [0, 39],
   'BirdAlto': [0, 40],
   'ExprAlto': [0, 41],
   'Desmond': [0, 42],
   'Koz_Alto': [0, 43],
   'Everette': [0, 44],
   'NY_Alto': [0, 45],
   'TenorSax': [0, 47],
   'MBrecker': [0, 48],
   'PopTenor': [0, 49],
   'SoulTenr': [0, 50],
   'RaspyTnr': [0, 51],
   'Getz_Tnr': [0, 52],
   'JobimTnr': [0, 53],
   'TenorSub': [0, 54],
   'Bari_Sax': [0, 55],
   'Sax_Sect': [0, 57],
   'Air_Sax': [0, 58],
   'Saxual': [0, 59],
   'Sanford': [0, 60],
   'Piccolo': [0, 61],
   'Flute': [0, 62],
   'Real_Flt': [0, 63],
   'SilvrFlt': [0, 64],
   'ClassFlt': [0, 65],
   'Nz_Flute': [0, 66],
   'VoxFlute': [0, 67],
   'AquaFlut': [0, 68],
   'OakFlute': [0, 69],
   'Bass_Flt': [0, 70],
   'Afri_Flt': [0, 71],
   'PennyWhs': [0, 72],
   'TinWhist': [0, 73],
   'Flutofon': [0, 74],
   'Inca_Flt': [0, 75],
   'Noze_Flt': [0, 76],
   'Quena': [0, 77],
   'Quena_x2': [0, 78],
   'PanFlute': [0, 79],
   'Andean': [0, 80],
   'Pan_Pipe': [0, 81],
   'Bali_Flt': [0, 82],
   'IndiaFlt': [0, 83],
   'Ambience': [0, 84],
   'WetFone': [0, 85],
   'Maya_Flt': [0, 86],
   'Shakuhat': [0, 87],
   'Bamboo': [0, 88],
   'PanPicol': [0, 89],
   'Coca__': [0, 90],
   'Ocarina_': [0, 91],
   'Lonely': [0, 92],
   'Recorder': [0, 93],
   'JazzClar': [0, 95],
   'ClsClrnt': [0, 96],
   'Bs_Clrnt': [0, 97],
   'Oboe': [0, 99],
   'Eng_Horn': [0, 100],
   'SftEngHn': [0, 101],
   'Bassoon': [0, 102],
   'Flurinet': [0, 103],
   'Crumbon': [0, 104],
   'Klarina': [0, 105],
   'ThaiReed': [0, 106],
   'Chanter': [0, 107],
   'Digirdoo': [0, 108],
   'IslePipe': [0, 109],
   'SoftPipe': [0, 110],
   'LitePipe': [0, 111],
   'CelloSax': [0, 112],
   'YamaBotl': [0, 113],
   'Solo_Vln': [0, 114],
   'DrkVioln': [0, 115],
   'SweetVln': [0, 117],
   'Fiddle': [0, 118],
   'Viola': [0, 119],
   'SwtViola': [0, 120],
   'RosinVla': [0, 121],
   'Cello': [0, 122],
   'SoloCell': [0, 123],
   'DrkCello': [0, 124],
   'Bow_Bass': [0, 125],
   'HiStrEns': [0, 126],
   'Pizzicat': [0, 127],
   'Harmonca': [1, 0],
   'MouthHrp': [1, 1],
   'BluesHrm': [1, 2],
   'Stevie_': [1, 3],
   'Toots_': [1, 4],
   'Accordn_': [1, 5],
   'Concrtna': [1, 6],
   'Jazz_B3': [1, 7],
   'Clavinet': [1, 8],
   'Funky': [1, 9],
   'SteelDrm': [1, 10],
   'Yangchin': [1, 12],
   'Asia_Plk': [1, 13],
   'JapanPlk': [1, 14],
   'Tambura': [1, 15],
   'Sitar': [1, 16],
   'ElecHarp': [1, 17],
   'SteelGtr': [1, 18],
   'AcGuitar': [1, 19],
   'Flamenco': [1, 20],
   'SpainGtr': [1, 21],
   'NylonGtr': [1, 22],
   'SwtNylGt': [1, 23],
   'Les_Gtr': [1, 24],
   'Joe_Pass': [1, 25],
   'FMGuitar': [1, 26],
   'Lucille': [1, 27],
   '__PAT__': [1, 28],
   'EFXStrat': [1, 29],
   'ClnStrat': [1, 30],
   'Surf_Gtr': [1, 31],
   'Mute_Gtr': [1, 32],
   'WahGtCC4': [1, 33],
   'PatSynGt': [1, 34],
   'BluesGtr': [1, 35],
   'Clapton': [1, 36],
   'PopODGtr': [1, 37],
   'Carlos': [1, 38],
   'TubeGtr_': [1, 39],
   'FET_Guit': [1, 40],
   'Dist_Gtr': [1, 41],
   'Wah_Lead': [1, 42],
   'Wah_Dist': [1, 43],
   'Eddie4th': [1, 45],
   'Feedback': [1, 46],
   'Hendrix': [1, 47],
   'TalkBox_': [1, 48],
   '_XTREME_': [1, 49],
   'Hercules': [1, 50],
   'SynClav': [1, 51],
   'Syncro': [1, 52],
   'Avalana': [1, 54],
   'Voxanne': [1, 55],
   'Beauty': [1, 56],
   'SpaceOut': [1, 57],
   'PtchNoiz': [1, 59],
   'BreathTb': [1, 60],
   'Air_Lead': [1, 61],
   'Breezer': [1, 62],
   'ZawiLead': [1, 63],
   'Voxofone': [1, 64],
   'Whistler': [1, 65],
   'Debussy': [1, 66],
   'Sines': [1, 67],
   'SmoothLd': [1, 68],
   'Slinky': [1, 69],
   'AirStick': [1, 70],
   'RotoFone': [1, 71],
   'Vox_Lead': [1, 72],
   'Squeezy': [1, 73],
   'Lyricon': [1, 74],
   'Ana_Lead': [1, 75],
   'Mobius': [1, 76],
   '_70sLead': [1, 77],
   'Osc_Lead': [1, 78],
   'Saw_Lead': [1, 79],
   'SAWS': [1, 80],
   'ResoSaws': [1, 81],
   'EML_Lead': [1, 82],
   'HPFilter': [1, 83],
   'EWI_ARP': [1, 84],
   'EWI_Lead': [1, 85],
   'Koz_Lead': [1, 86],
   'MattLead': [1, 87],
   'PATCHMAN': [1, 88],
   'Taurus': [1, 89],
   'Phaser': [1, 90],
   'SynZilla': [1, 91],
   'MegaSyn': [1, 92],
   'Winwood': [1, 93],
   'Pulse_Ld': [1, 94],
   'Corea': [1, 95],
   'SquareLd': [1, 96],
   'Korg_Ld': [1, 97],
   'LuckyMan': [1, 98],
   'Lyle': [1, 99],
   'Analog': [1, 100],
   'Nyle': [1, 101],
   'Floyd_Ld': [1, 102],
   'BorgHorn': [1, 103],
   'Freik': [1, 104],
   'Fazar': [1, 105],
   'Dungeon': [1, 106],
   'NevrLand': [1, 107],
   'Brekord1': [1, 108],
   'Brekord2': [1, 109],
   'Brekord3': [1, 110],
   'MotownBs': [1, 112],
   'SteinBas': [1, 113],
   'FunkBass': [1, 114],
   'PickBass': [1, 115],
   'SnapBass': [1, 116],
   'Thumb_Bs': [1, 117],
   'TiteBass': [1, 118],
   'JacoBass': [1, 119],
   'StratoBs': [1, 120],
   'Sticky': [1, 121],
   'MuteBass': [1, 122],
   'Ac_Bass': [1, 123],
   'Juicy_Bs': [1, 124],
   'GnarlyBs': [1, 125],
   'Moog_Bs': [1, 126],
   'Bass1000': [1, 127],

   'ElecBass': [3, 0],
   'VL_Drums': [3, 1],
   'NY_Tenor': [3, 2],
   'GuitHero': [3, 3],
   'Ghost_Ld': [3, 4],
   'Theremin': [3, 5],
   'Trombone': [3, 6],
   'TiteBari': [3, 7],
   'DorseyTb': [3, 8],
   'Clarinet': [3, 9],
   'BrtBsClr': [3, 10],
   'BrtVioln': [3, 11],
   'KennyGee': [3, 12],
}

function Program(name) {
    var program = VLPrograms[name];
    if (!program) {
        post('ERROR: Don\'t understand program named', name);
        return function() {};
    }
    var bank = program[0], pc = program[1];
    return function(show) {
        show.objects.maxclass.unpack.message(bank, pc);
    };
};







Max.foreach = function(f) {
    for (var i = Max.patcher.firstobject; i; i = i.nextobject)
        f(i);
};

Max.findObjects = function(name, value) {
    var result = [];
    Max.foreach(function(i) { if (i[name] == value) result.push(i); });
    return result;
};

Max.findName = function(name) {
  return Max.findObjects('varname', name);
};

Max.findSubpatcher = function(name) {
  return Max.findName(name, container)[0].subpatcher();
};

Max.findClass = function(name) {
    return Max.findObjects('maxclass', name);
};

Max.findAllObjects = function(name, unique) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '') {
            if (value in result) {
                var instances = result[value];
                if (unique) {
                    post('ERROR: duplicate value for :' + name + ':' + value + ':', '\n');
                    post('instances!!!  ', Print(instances, 3), '\n'); }
                else
                    instances.push(max_object);
            } else {
                result[value] = unique ? max_object : [max_object];
            }
        }
    });
    return result;
};

Max.findFirstObject = function(name) {
    var result = {};
    Max.foreach(function(max_object) {
        var value = max_object[name];
        if (value !== undefined && value != '')
            result[value] = max_object;
    });
    return result;
};

Max.findAll = function() {
    return {
        'maxclass': Max.findFirstObject('maxclass'),
        'varname': Max.findFirstObject('varname'),
    };
};









Util.IsString = function(x) {
  return typeof(x) == 'string';
};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};






Util.trimFrontRE = /^\s+/;
Util.trimBackRE = /\s+$/;

Util.trim = function(s) {
  if (typeof(s) != 'string') {
    post('Error at', "js/swirly/util/trim.js", ':', 12, ':', 'Not a string', ' ', Print(s), '\n');
    return s;
  }
  return s.replace(Util.trimBackRE, '').replace(Util.trimFrontRE, '');
};

// Read characters or JSON data from files.
var FileReader = new Object();

FileReader.LINE_SPLIT = /\r?\n/;
FileReader.PATH = [];

FileReader.SetPath = function(path) {
    FileReader.PATH = path;
    post('Current path is now', path.join(':'), '\n');
};

FileReader.separator = '/';

FileReader.IsRelative = function(name) {
    return (name[0] != this.separator) && (name.indexOf(':' ) == -1);
};

FileReader.Open = function(name) {
    name = Util.trim(name);
    var path = [''];
    if (FileReader.IsRelative(name))
        path = FileReader.PATH;

    for (var i in path) {
        var p = path[i];
        var file = new File(p.length ? (p + this.separator + name) : name);
        if (file.isopen)
            return file;
    }

    post('Error at', "js/swirly/util/FileReader.js", ':', 38, ':', "Couldn't open file", ' ', Print(name), '\n');
    return null;
};

FileReader.Read = function(filename, length) {
    var file = FileReader.Open(filename);
    return file && file.readstring(length || 1000000);
};

FileReader.CleanJsonComments = function(data) {
    var lines = data.split(FileReader.LINE_SPLIT);
    for (var i in lines) {
        var line = lines[i];
        var wasBackslash = false;
        for (var j = 0, len = line.length; j < len; j++) {
            if (wasBackslash) {
                wasBackslash = false;
            } else {
                var ch = line[j];
                if (ch == '\\') {
                    wasBackslash = true;
                } else if (ch == '#') {
                    lines[i] = line.substr(0, j);
                    break;
                }
            }
        }
    }
    return lines.join('\n');
};

FileReader.ParseJson = function(data, filename) {
    filename = filename || '(none)';
    try {
        data = FileReader.CleanJsonComments(data)
        return (data == '') ? {} : JSON.parse(data);
    } catch (err) {
        post('JSON error in file ' + filename + ':' +
             err.lineNumber + ': ' + err.name + '\n');
        return null;
    }
};

FileReader.ReadJson = function(filename, length) {
    var data = FileReader.Read(filename, length);
    return data && FileReader.ParseJson(data, filename);
};


function ShowRunner() {
    var self = this;

    this._methods = [
        // These methods can be overridden on the "mapper" object.
        ['note', 'MIDI note on and off'],
        ['breath', 'breath control'],
        ['program', 'program change'],
        ['pitchbend', 'pitchbend'],

        // These ones are hard-coded.
        ['phasor', 'The phasor value between 0 and 1'],
        ['transport', 'A list representing the transport number.'],
        ['sequence', 'Cues for the sequencer.'],
        ['mapper', 'Cues for the mapper.'],
        ['dmxusbpro', 'Menu output from the dmx USB pro.'],
        ['testing', 'Turn on and off individual instruments.'],

        // Debugging only.
        // ['envelope', 'test for envelope'],
        // ['level', 'audio level'], // This is disabled.
        // ['timer', 'Result of some incoming time'],  // This is disabled.

    ];

    var objects = Max.findAll(),
        dmxusbpro = objects.maxclass.dmxusbpro,
        dmxCache,
        cuesToRun,
        scene,
        cues = {'mapper': [], 'sequence': []},
        multisliders = [
            objects.varname.laser_1,
            objects.varname.laser_2,
            objects.varname.laser_3,
            objects.varname.laser_4,
            objects.varname.moving_head],
        bankSizes = [9, 9, 9, 9, 14],
        bankSize = 16,
        bankCount = 5,
        channelCount = bankCount * bankSize;

    this.objects = objects;

    function canRun() {
        return true; // && self._time && self._time[1] == 1;
    }

    function runCues() {
        if (cuesToRun.length && canRun()) {
            cuesToRun.forEach(function(c) { c(); } );
            cuesToRun = [];
        }
    };

    function setDmx(channel, bank, entry, value) {
        dmxCache[channel] = value;
        dmxusbpro.message(channel, value);
        multisliders[bank].message('set', [entry, value]);
        // post('!', channel, bank, entry, value, '\n');
        // objects.maxclass.number.message('set', value);
    };

    this._clearDMX = function() {
        dmxCache = new Array(channelCount + 1); // We never use channel 0.
        dmxCache = [];
        for (var bank = 0; bank < bankCount; ++bank) {
            var base = bank * bankSize + 1;
            for (var entry = 0; entry < bankSizes[bank]; ++entry)
                setDmx(base + entry, bank, entry + 1, 0);
        }
    };

    function clear() {
        cuesToRun = [];
        scene = {'mapper': {}, 'sequence': function(time) {}};
        self._clearDMX();
        objects.varname.sequence.message('set', '');
        objects.varname.mapper.message('set', '');
    }

    clear();

    this._dmxratio = function(channel, value) {
        self._dmxoutput(channel, Ranges.dmx.select(value));
    };

    this._dmxoutput = function(channel, value) {
        // Avoid sending the same value twice.
        if (value === dmxCache[channel])
            return;

        var bank = Math.floor(channel / bankSize),
            entry = channel - bankSize * bank;


        if (channel <= 0 || channel > channelCount) {
            post('ERROR: channel', channel, '\n');
            return;
        }

        if (value < 0 || value > 255) {
            post('ERROR: value', value, '\n');
            return;
        }

        var size = bankSizes[bank];
        if (entry > size) {
            post('ERROR: entry', entry, 'is greater than bank size', size,
                 'for bank', bank, channel, '\n');
            return;
        }


        setDmx(channel, bank, entry, value);
    };

    this.transport = function() {
        self._time = arrayfromargs(arguments);
        runCues();
        // scene.sequence.transport && scene.sequence.transport();
    };

    this.dmxusbpro = function(command, device) {
        if (command === 'append' && device != 'None')
            dmxusbpro.message(device);
    };


    this.sequence = function(note) {
        //post('receiving!', note, '\n');
        var cue = self.getCues().sequence[note];
        if (!cue) {
            post('ERROR: didn\'t understand sequence', note, '\n');
            return;
        }

        function run() {
            var name = cue[0], runner = cue[1];
            var cueBar = self._time[0], context = {};

            name = name.split(' ');
            objects.varname.sequence.message('set', name);
            // post('Sequence:', name, note, cueBar, '\n');
            scene.sequence = function(time) {
                runner(self, time + self._time[0] - cueBar, context);
            };
        };
        if (canRun())
            run();
        else
            cuesToRun.push(run);
    };

    this.mapper = function(note) {
        var cue = cues.mapper[note];
        if (!cue) {
            post('ERROR: didn\'t understand mapper', note, '\n');
            return;
        }

        var name = cue[0], runner = cue[1];
        // post('Mapper:', name, '\n');
        objects.varname.mapper.message('set', name);
        scene.mapper = runner(self);
    };

    function delegate(method) {
        self[method] = function(_) {
            var fn = scene.mapper[method];
            if (fn)
                fn.apply(self, arguments);
        };
    }

    delegate('note');
    delegate('breath');
    delegate('program');
    delegate('pitchbend');

    this.phasor = function(time) {
        scene.sequence(time);
    };

    this.addCue = function(cueType, name, action) {
        var cuesForType = cues[cueType]
        methodIndex = cuesForType.length.toString();
        name = name || methodIndex;
        cuesForType.push([name, action]);
        post('New cue: ' + cueType + '.' + name + ' (' + methodIndex + ')\n');
    };

    function addCues(cueType, cueList) {
        var cuesForType = cues[cueType]
        for (var i in cueList) {
            var cue = cueList[i],
                name = cue[0],
                action = cue[1],
                methodIndex = cuesForType.length.toString();
            cuesForType.push([name, action]);
            post('New cue: ' + cueType + '.' + name +
                 ' (' + methodIndex + ')\n');
        }
    };

    this.addMapper = function(_) {
        addCues('mapper', arguments);
    };

    this.addSequence = function(_) {
        addCues('sequence', arguments);
    };

    this.getCues = function() { return cues; }

    this.testing = function(on) {
        self._clearDMX();
        if (on) {
            var test = {
                1: 192,
                9: 128,
                17: 192,
                25: 128,
                33: 192,
                41: 128,
                49: 192,
                57: 128,
                70: 255,
                74: 255};
            for (var i in test)
                self._dmxoutput(parseInt(i), test[i]);
        }
    };
};

var _emptyLasers = {};
for (var _i in Laser.channels)
    _emptyLasers[_i] = 0;


function ldict(pattern, color, assignments) {
    var result = {};
    Util.dict.update(result, _emptyLasers);
    Util.dict.update(result, assignments);

    result['mode'] = 255;

    var p = Laser.pattern[pattern];
    if (p !== undefined)
        result['pattern'] = p;
    else
        post('ERROR: Didn\'t understand pattern', pattern, '\n');

    var c = Laser.color[color];
    if (c !== undefined)
        result['color'] = c;
    else
        post('ERROR: Didn\'t understand color', color, '\n');
    return result;
};

function laserScene(_) {
    var state = {}
    for (var i = 0; i < 4; ++i) {
        var laser = arguments[i];
        var dict;
        if (!laser) {
            dict = {};
            update(dict, _emptyLasers);
            dict.mode = 0;
        } else {
            dict = ldict.apply(this, laser);
        }
        update(state, Dict.remap(Channel.laser[i], dict));
    }
    return DMXScene(state);
};

function laserAll(one) { return laserScene(one, one, one, one); }

// var ttest1 = laser_dict('circle', 'red', {vpos: 7}, 0, 1, 2);

var _moving = Channel.moving,
    _laser = Channel.laser;

var _show_runner = new ShowRunner();

// TODO: what's wrong with the old blackout?
_show_runner.addSequence(
    ['blackout', laserScene()],

    ['svengali 1', laserScene(['line', 'blue'])],
    ['svengali 2', laserScene(0, ['line', 'blue']) ],
    ['svengali 3', laserScene(0, 0, ['line', 'blue'])],
    ['svengali 4', laserScene(0, 0, 0, ['line', 'blue'])],
    ['svengali 5', laserAll(['line', 'cyan'])],

    ['svengali red 1', laserScene(['line', 'red'])],
    ['svengali red 2', laserScene(0, ['line', 'red']) ],
    ['svengali red 3', laserScene(0, 0, ['line', 'red'])],
    ['svengali red 4', laserScene(0, 0, 0, ['line', 'red'])],
    ['svengali red 5', laserAll(['line', 'pink'])],

    ['time 1', laserAll(['star', 'yellow', {zrot: 200}])],
    ['time 2', laserAll(['star', 'blue', {zrot: 200}])],
    ['time 3', laserAll(['star', 'green', {zrot: 200}])],
    ['time 4', laserAll(['star', 'red', {zrot: 200}])],

    ['time 1', laserAll(['square', 'yellow', {zrot: 200}])],
    ['time 2', laserAll(['square', 'blue', {zrot: 200}])],
    ['time 3', laserAll(['square', 'green', {zrot: 200}])],
    ['time 4', laserAll(['square', 'red', {zrot: 200}])],

    ['time 1', laserAll(['spiral', 'yellow', {zrot: 175, xpos: 225}])],
    ['time 2', laserAll(['spiral', 'blue', {zrot: 175, xpos: 225}])],
    ['time 3', laserAll(['maltese_cross', 'green', {zrot: 175, xpos: 225}])],
    ['time 4', laserAll(['maltese_cross', 'red', {zrot: 200, xpos: 225}])],


    ['spacey',
     laserScene(
         ['spiral', 'blue', {xrot:140, yrot: 180, zrot: 130, xpos: 135, ypos: 137}]
     )],

    ['spacey 2',
     laserScene(
         ['spiral', 'blue', {xrot:140, yrot: 180, zrot: 130, xpos: 135, ypos: 137}],
         ['hourglass', 'green', {xrot:130, yrot: 170, zrot: 132, xpos: 138, ypos: 136}]
     )],

    ['spacey 2',
     laserScene(
         ['spiral', 'blue', {xrot:140, yrot: 180, zrot: 130, xpos: 135, ypos: 137}],
         ['hourglass', 'green', {xrot:130, yrot: 170, zrot: 132, xpos: 138, ypos: 136}],
         ['parallel_lines', 'red', {xrot:133, yrot: 174, zrot: 136, xpos: 132, ypos: 131}]
     )],

    ['spacey 2',
     laserScene(
         ['spiral', 'blue', {xrot:140, yrot: 180, zrot: 130, xpos: 135, ypos: 137}],
         ['hourglass', 'green', {xrot:130, yrot: 170, zrot: 132, xpos: 138, ypos: 136}],
         ['parallel_lines', 'red', {xrot:133, yrot: 174, zrot: 136, xpos: 132, ypos: 131}],
         ['logarithmic', 'pink', {xrot:135, yrot: 175, zrot: 132, xpos: 131, ypos: 138}]
     )],

    ['spirit',
     laserScene(
         ['dotted_line', 'all', {xrot:140, yrot: 180, zrot: 130, xpos: 135, ypos: 137}],
         ['dotted_semicircle', 'all', {xrot:130, yrot: 170, zrot: 132, xpos: 138, ypos: 136}],
         ['random_dots', 'all', {xrot:133, yrot: 174, zrot: 136, xpos: 132, ypos: 131}],
         ['random_dots', 'all', {xrot:135, yrot: 175, zrot: 132, xpos: 131, ypos: 138}]
     )],

    ['spirit 2',
     laserScene(
         ['dotted_line', 'all', {xrot:129, yrot: 129, zrot: 129, xpos: 129, ypos: 129}],
         ['dotted_semicircle', 'all', {xrot: 129, yrot: 129, zrot: 129, xpos: 129, ypos: 129}],
         ['random_dots', 'all', {xrot: 129, yrot: 129, zrot: 129, xpos: 129, ypos: 129}],
         ['random_dots', 'all', {xrot: 129, yrot: 129, zrot: 129, xpos: 129, ypos: 129}]
     )]

);

_show_runner.addMapper(
    ['standard', NoteAndBreathMapper()],





    ['effect', NoteAndBreathMapper({effect: 0.8})],
    ['effect_pos', NoteAndBreathMapper({effect_pos: 1.0})]
);

Max.ObjectInlets(_show_runner);

post('Original source:', "js/max/show_runner.js", ' Compile date:', 'Thu Jun 25 17:36:47 EDT 2015', '\n');
