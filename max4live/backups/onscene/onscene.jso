autowatch = 1;
outlets = 1;






var Live = new Object();

// TODO: get rid of this global.
Live.api = new LiveAPI(this.patcher);







// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};

var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
}

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
}

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
}

function toLoggable(x) {
    if (x === null)
        return '<null>';

    if (x === undefined)
        return '<undefined>';

    if (typeof(x) == 'object')
        return JSON.stringify(x);

    return String(x);
}

function maxLog(_) {
    for (var i = 0; i < arguments.length; i++)
        post(toLoggable(arguments[i]));
}

Live.this_track = 'this_device canonical_parent';

Live.ClipPath = function(slot, value) {
    return Live.this_track + ' clip_slots ' + slot + ' ' + value;
};

Live.ClipNamePath = function(slot) {
    return Live.ClipPath(slot, 'clip');
};

// Map names to path, propname pairs.
Live.propertyDictionary = {
    clip: [Live.this_track, 'playing_slot_index'],
    clipname: [Live.ClipNamePath, 'name'],
    fired: [Live.this_track, 'fired_slot_index'],
    position: [Live.ClipNamePath, 'playing_position'],
    trackname: [Live.this_track, 'name'],
};

Live.GetPropertyPath = function(property, arg) {
    var p = Live.propertyDictionary[property];
    if (p) {
        var path = p[0], name = p[1];
        if (typeof(path) == 'function')
            path = path(arg);
        return [path, name];
    } else {
        post(('Error at ' + "js/swirly/live/Property.js" + ':' + 33 + ':' + "Live.GetPropertyPath: Didn't recognize" + ' ' + Print(PrintJoin(property, arg))), '\n');
    }
};

Live.ListenToProperty = function(property, callback, arg) {
    var p = Live.GetPropertyPath(property, arg);
    if (p)
        Live.ListenToPropertyRaw(p[0], p[1], callback);
    else
        post(('Error at ' + "js/swirly/live/Property.js" + ':' + 42 + ':' + "Couldn't understand property" + ' ' + Print(property)), '\n');
};

Live.ListenToPropertyRaw = function(path, propname, callback) {
    function localCallback(args) {
        if (args.length && args.length > 1 && args[0] == propname)
            callback(args[1]);
    };

    new LiveAPI(localCallback, path).property = propname;
};

Live.GetProperty = function(property, arg) {
    var p = Live.GetPropertyPath(property, arg);
    function none() {};
    return p && p.length && p.length > 1 && new LiveAPI(none, p[0]).get(p[1]);
};




var Logging = {};

Logging.setLogging = function(on) {
  Logging.Log = on ? Postln : function() {};
};

Logging.setLogging(false);

function bang() {
    Live.ListenToProperty('clip', function(value) {
        if (value >= 0) {
            var name = Live.GetProperty('clipname', value);
            outlet(0, name);
        }
    });
};

post('Original source:', "js/max4live/onscene.js", ' Compile date:', 'Sat Aug  8 18:37:45 EDT 2015', '\n');
