

autowatch = 1;


var Max = new Object();

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
  inlets = arguments.length;
  for (var i = 0; i < arguments.length; ++i) {
    var entry = arguments[i];
    Max.inlets[i] = {name: entry[0], func: entry[1]};
    setinletassist(i, entry[2] || entry[0]);
  }
};

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
  return (Max.inlets && inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

Max.messageNames = {msg_int: 1, msg_float: 1, list: 1};

function anything(_) {
  var entry = Max.inlets[inlet];
  if (entry && entry.func) {
    var args = arrayfromargs(arguments);
    if (!Max.messageNames[messagename])
      args = [messagename].concat(args);
    entry.func(args);
  } else {
    post("Didn't understand input for", Max.Inlet(), '\n');
  }
};

Max.inlets = {};
var Util = {};
Util.IsString = function(x) {
  return typeof(x) == 'string';
};
Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};
Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};
Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};
// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//
Max._outlets = {};
// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};
Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};
Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};
Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};
Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
    if (!Util.IsString(name)) {
      help = name[1] || name;
      name = name[0];
    }
    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        post('!', Print(a), '\n');
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;
    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};
//
// Implementation details below here!
//
// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};
// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};
// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};
var Midi = {};
// Javascript's mod (% operator) is screwed up:  see
// http://javascript.about.com/od/problemsolving/a/modulobug.htm
// Use Util.Mod instead.
Util.Mod = function(x, n) { return ((x % n) + n) % n; }
Midi.Nrpn = {};
Midi.Nrpn.MODULUS = Math.pow(2, 7);
Midi.Nrpn.MAX = Midi.Nrpn.MODULUS * Midi.Nrpn.MODULUS;
Midi.Nrpn.Value = function(value) {
  const MODULUS = Midi.Nrpn.MODULUS;
  const MAX = Midi.Nrpn.MAX;
  this.Set = function(value) {
    this.value = Util.Mod(value, MAX);
    this.coarse = Math.floor(this.value / MODULUS);
    this.fine = this.value % MODULUS;
  };
  this.Equals = function(that) {
    return (this.value == that.value);
  };
  this.Increment = function(inc) {
    this.Set(this.value + inc);
  };
  this.Copy = function() {
    return new Midi.Nrpn.Value(this.value);
  };
  if (value !== null)
    this.Set(value);
};
Midi.Nrpn.CONTROLLER = {
  data: {coarse: 6, fine: 38},
  decrement: 97,
  increment: 96,
  parameter: {coarse: 99, fine: 98},
};
Midi.Nrpn.CONFIG = {
  dedupe: {
    parameter: {all: true, coarse: true, fine: true},
    data: {all: false, coarse: true, fine: false},
  },
  increment: {enabled: true, multi: false},
};
Midi.Nrpn.Outputer = function(config) {
  this.parameter = new Midi.Nrpn.Value();
  this.data = new Midi.Nrpn.Value();
  this.config = config || Midi.Nrpn.CONFIG;
  const dedupe = this.config.dedupe;
  const controller = Midi.Nrpn.CONTROLLER;
  const names = ['parameter', 'data'];
  const bytes = ['coarse', 'fine'];
  this.Output = function(parameter, data) {
    var result = [];
    var that = {
      parameter: new Midi.Nrpn.Value(parameter),
      data: new Midi.Nrpn.Value(data),
    };
    for (var i in names) {
      var name = names[i];
      if (!(dedupe[name].all && that[name].Equals(this[name]))) {
        for (var j in bytes) {
          var part = bytes[j];
          var val = that[name][part];
          if (!(dedupe[name][part] && val == this[name][part])) {
            var cnt = controller[name][bytes[j]];
            result.push([val, cnt]);
            this[name][part] = val;
          }
        }
      }
    }
    return result;
  };
};
// Also see:
// http://www.optimalworks.net/blog/2007/web-development/javascript/array-detection
Array.Is = function(array) {
  return (array !== null) &&
    (typeof(array) == 'object') &&
    ((array.prototype === Array.prototype) ||
     (array.constructor &&
      !array.nodeType &&
      !array.item &&
      array.length !== undefined));
};
var MAX_DEPTH = 10;
function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';
  if (item == null)
    return 'null';
  if (item == 'undefined')
    return 'undefined';
  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';
  if (t == 'function')
    return (item.name || 'unknown') + '()';
  if (t != 'object')
    return item + '';
  var is_array = Array.Is(item);
  var result = [is_array ? '[' : '{'];
  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
};
// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));
  post('\n');
};
var _nrpn = new Midi.Nrpn.Outputer();
var _parameter = 0;
Max.SetOutlets(['controller', 'Controller data representing NRPNs']);
function _receiveData(data) {
  if (data.length != 1) {
    Postln('Bad data length', data);
    return;
  }
  var results = _nrpn.Output(_parameter, data[0]);
  Postln(results);
  for (var i in results)
    Max.ListOut.controller(results[i]);
};
function _receiveParameter(parameter) {
  var len = parameter.length;
  if (len == 0 || len > 2) {
    Postln('Bad parameter length', parameter);
    return;
  }
  _parameter = parameter[0];
  if (len == 2)
    _receiveData([parameter[1]]);
};
var _btw = ' between 0 and ' + (Midi.Nrpn.MAX - 1);
Max.SetInlets(['parameter', _receiveParameter, 'parameter number' + _btw],
              ['data', _receiveData, 'Data' + _btw]);
post('Compiled nrpn_out.js on ' + new Date().toString(), '\n');
